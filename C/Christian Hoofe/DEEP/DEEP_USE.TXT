



How to use DEEP


     Version 0.91



     Christian Hoofe

       Solmsstr.8

     1000 Berlin 61

     West Germany



      July 15, 1991




Contents



1  Getting started                                                         2

   1.1  Introduction : : : : : : : : : : : : : : : : : : : : : : : : : :   2

   1.2  Installation  : : : : : : : : : : : : : : : : : : : : : : : : :    3



2  Workbench                                                               4

   2.1  Configuration file   : : : : : : : : : : : : : : : : : : : : : :   4

   2.2  Buffer concept   : : : : : : : : : : : : : : : : : : : : : : : :   4

   2.3  The Editor   : : : : : : : : : : : : : : : : : : : : : : : : : :   5

   2.4  Running a program : : : : : : : : : : : : : : : : : : : : : : :    5

   2.5  The Command Window  : : : : : : : : : : : : : : : : : : : : :      6



                                  1




Chapter  1



Getting  started



1.1    Introduction



DEEP ^1 is a program to calculate difference and differential equation systems.
DEEP is based on the C interpreter described in Peter A. Darnell's and
Philip E. Margolis' "C: A Software Engineering Approach, Springer Verlag,
1991."

The program runs on the Atari ST and TT. You will get the best results
with an monochrom monitor but the program also runs on color systems.

The development enviroment (= workbench) uses GEM the graphical user
interface of the Atari. The workbench offers three different window types:



   - edit windows to edit the source code


   - graphic windows to display vectors with XY-Graphs


   - a command window to display the output and execute single line com-
     mands



Files can be im- and exported in the DIF format.
____________________________
1       Difference Equation Exploration Package



                                  2




1.2    Installation



The following files should be in the DEEP folder:



                       COMMAND               2
                       DEEP.CFG            532
                       DEEP___C.CFG        532
                       DEEP.PRG         117806
                       DEEP.RSC          18038
                       DEEP_MAN.TXT      49463
                       DEEP_USE.TXT       9712
                       READ_ME.TXT


In the DEEP folder you find another folder EXAMPLES. This folder con-
tains the example programs described in the DEEP manual.

If you want use DEEP an harddisk copy the DEEP folder to it. If you copy
DEEP to the C: drive you can use the DEEP___C.CFG. Delete DEEP.CFG
and rename DEEP___C.CFG to DEEP.CFG and you get the same configu-
ration as if you started DEEP from drive A:.  See 2.1 for a description of
the configuration file.

If you get any problems, you can contact me via the titel page address.

Deep is written with Turbo C and nothing else. As far as I'm concerned I
have tried to do no dirty things. Nevertheless the program consist of 15000
lines of source code, and there will be errors and you will find them.

To start DEEP make a double on DEEP.PRG and look to the next chapter.



                                  3




Chapter  2



Workbench



The workbench offers all tools you need to develop a program.  In this
chapter all functions of the workbench are described. It's assumed that you
know how to work with the GEM enviroment.



2.1    Configuration file



After starting DEEP.PRG the program looks for a file DEEP.CFG which
contains the configuration informations of the workbench.  If you leave
the  program,  DEEP  will  write  the  configuration  informations  back  to
DEEP.CFG or - if the file doesn't exist - create it.

The configuration file saves the buffer list, the open windows and its' position
on the desktop and the path of your last file open action. If your DEEP.CFG
is corrupted - which is indicated by wrong placed windows or a strange
looking buffer list - delete the file and start DEEP again.



2.2    Buffer concept



The information which is displayed in a window is stored in a buffer. The
buffer list which can be displayed with ALT-B or through the menu 'Control-
Buffers' contains all file names which have been opened with DEEP. Fur-
thermore it contains all graphic windows and if opened command which
represents the command window.



                                  4




The file names are black if the windows are open otherwise they are grey.
Within the dialog box you can open, erase or close buffers.  As another
functionality you can mark buffers as project files. 'Open' reads a file from
the disk to the specified buffer. 'Close' has the same function as if you click
on the close box at the left upper corner of a window. 'Erase' closes a buffer
and deletes it from the buffer list.

If you have edited a source file and you want to run the interpreter, you have
to mark this file as project. You can mark several text buffers as projects,
if you have spread the source code over several files.

Graphic buffers hold the values for a line chart diagram.  Before an in-
terpreter run starts all graphic buffers and its' windows will be deleted.
Changes of an array item which is displayed in a graphic window do not
effect the graphical representation.



2.3    The Editor



If you open a file via the 'File' menu or if you type a new file name a edit
window will be opened.

The length of an text within a edit window is only limited by the availiable
free memory. The same limitation holds for the line length.

Only printable characters are loaded ^1 to an edit window. If you read a file
which contains such characters you will receive a warning. In an C source
code text only printable characters are used, so you will normally never get
this message.  If you try to load an executable program, this message will
appear. If you save this text, characters which can not be printed are not
written back to the file. This will damage the program.

For most functions of the program hot keys are availiable.  You find the
key codes in the drop down menus.  Table 2.1 show the hot keys with no
counterpart in the drop down menus:



2.4    Running a program



If you have edited your source code click on 'Run program' in the 'Control'
menu or press ALT R to start the program execution.
____________________________
1       This means all characters below 32 in the ASCII code will not be loaded.



                                  5




              ____________________________________________
             |                                            |
             |                    Keys                    |
             |___________________________________________ |
             |_key_________|function______________________|
             |--------------------------------------------|
             |_Insert______|toggle_insert/overwrite_mode__|
             |_Undo________|write_back_block_buffer_______|
             |_CTRL_K______|delete_line___________________|
             |_CTRL_Y______|delete_from_cursor_to_end_____|
             |             |of_file_______________________|
             |_Clr_________|go_to_first_line______________|
             |_SHIFT_Clr___|go_to_last_line_______________|
             |_Shift_Up____|go_page_up____________________|
             |_Shift_Down__|go_page_down__________________|
             |_Shift_Left__|begin_of_line_________________|
             |_Shift_Right_|end_of_line___________________|
              --------------------------------------------

          Table 2.1: Hot keys not visible in drop down menus



The first action of the interpreter is deleting the variable list and the 
clearing the DEEP memory.

Then the source code runs through the preprocessor.  A message in the
command window shows which file is actually in use.  All files which are
marked with a 'P' (=Project) in the buffer list go this way.

If the interpreter finds an error this is shown in the command window.
The 'find error' command at the 'Edit' menu goes to the error line if the
corresponding window is open.

If no errors have been found, the interpreter starts the program execution.
If the 'Esc active' in the 'Control' menu is set, you can stop the execution
by pressing the 'Esc' key.  A dialog will appear which displays the source
code where the program was stopped. This dialog box enables you to inspect
global and local variables and if necessary to change them. You can continue
the program execution or cancel it. If 'Esc active' is not active you can not
stop the program execution, which leads to a faster execution speed. In the
progam testing phase the 'Esc active' should be active.



2.5    The Command Window



The command enables a direct acess to the DEEP interpreter. If you press
the 'Enter' key DEEP tries to execute the line where the cursor is located.



                                  6




If you press the 'Return' key you will get a normal carriage return linefeed.
You can make variable declarations from the command window or a function
call or do a calculation after a simulation run. There are a lot of possibilties
to use this feature of DEEP.

All messages are written to the command window. This includes all output
which is produced by a program (printf() etc.).

Except the execution of a single line the command is equal to an edit window.
All edit features are availiable.



                                  7
