(Message inbox:1863)
 -- using template mhl.format --
Date:    Fri, 04 Jan 91 15:36:18 EST

To:      ersmith@uwovax.uwo.ca, apratt%atari.uucp@ames.arc.nasa.gov,
	 roeder@cs.uni-sb.de, hyc@math.lsa.umich.edu,
	 Ritzert%DMZRZU71.BITNET@CORNELLC.cit.cornell.edu,
	 stabl%unipas%unido.uucp@uunet.UU.NET,
	 ridderbusch.pad%nixbur%linus%philabs.uucp@uunet.UU.NET,
	 schwab@ls5.informatik.uni-dortmund.de,
	 SKOLODZIESKI@VAXB.STEVENS-TECH.EDU,
	 bjsjr%ncoast%usenet.INS.CWRU.Edu%uunet.uucp@uunet.UU.NET,
	 NTOMCZAK%ugw.utcs.utoronto.ca%uunet%UALTAVM.bitnet@uunet.UU.NET,
	 jimh%ultra.com%uunet.uucp@uunet.UU.NET

From:    bammi@cadence.com (jwahar r. bammi)
Subject: oops

Return-Path: bammi@cadence.com
Sender:  bammi@cadence.com

sorry, there were some minor bugs in the gcc-1.38 diffs that i
sent out earlier today. the corrected files xm-atari.h and tm-atari.h
are included below. also, some minor diffs to apply to cccp.c and
toplev.c *after* you have already applied the diffs in gcc-138.diff
that i sent earlier.

cheers,
--
bang:   uunet!cadence!bammi			jwahar r. bammi
domain: bammi@cadence.com
GEnie:	J.Bammi
CIS:    71515,155
--
#!/bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #!/bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	cccp.diff
#	tm-atari.h
#	toplev.diff
#	xm-atari.h
# This archive created: Fri Jan  4 15:31:10 1991
# By:	Jwahar R. Bammi(Cadence Design Systems)
#     Usenet:	 uunet!cadence!bammi
#   Internet:	 bammi@cadence.com
#
export PATH; PATH=/bin:$PATH
echo shar: extracting "'cccp.diff'" '(869 characters)'
if test -f 'cccp.diff'
then
	echo shar: over-writing existing file "'cccp.diff'"
fi
sed 's/^X//' << \SHAR_EOF > 'cccp.diff'
X*** ../gcc-diff-1.38/cccp.c	Thu Jan  3 13:57:03 1991
X--- cccp.c	Fri Jan  4 15:14:15 1991
X***************
X*** 23,29 ****
X  
X  typedef unsigned char U_CHAR;
X  
X- #ifndef atarist
X  
X  #ifdef EMACS
X  #define NO_SHORTNAMES
X--- 23,28 ----
X***************
X*** 48,53 ****
X--- 47,54 ----
X  #undef bzero
X  #undef bcmp
X  
X+ #ifndef atarist
X+ 
X  #include <sys/types.h>
X  #include <sys/stat.h>
X  #include <ctype.h>
X***************
X*** 79,88 ****
X  #include <time.h>
X  #include "stddef.h"
X  
X! extern long _stksize = -1L;	/* want big stack cause include files
X  				   get alloca'ed there */
X  
X  #endif		/* atarist */
X  
X   
X  /* VMS-specific definitions */
X--- 80,90 ----
X  #include <time.h>
X  #include "stddef.h"
X  
X! long _stksize = -1L;	/* want big stack cause include files
X  				   get alloca'ed there */
X  
X  #endif		/* atarist */
X+ 
X  
X   
X  /* VMS-specific definitions */
SHAR_EOF
if test 869 -ne "`cat 'cccp.diff' | wc -c`"
then
	echo shar: error transmitting "'cccp.diff'" '(should have been 869 char
acters)'
fi
echo shar: extracting "'tm-atari.h'" '(6489 characters)'
if test -f 'tm-atari.h'
then
	echo shar: over-writing existing file "'tm-atari.h'"
fi
sed 's/^X//' << \SHAR_EOF > 'tm-atari.h'
X/* target def file for atarist (both TOS and MINIX), for use with GNU CC */
X
X/* The following Macros control the compilation
X *
X *	CROSSATARI	defined when making cross compiler for TOS or Minix
X *	MINIX		defined when making cross compiler for MINIX only
X *	atariminix	defined when making compiler for MINIX
X *	atarist		defined when making compiler for TOS
X */
X
X#include "tm-m68k.h"
X
X#if defined(__GNUC__)
X#  if defined(alloca)
X#    undef alloca
X#  endif
X#  define alloca __builtin_alloca
X#endif
X
X#if defined(sparc)
X# if !defined(alloca)
X#    include <alloca.h>
X# endif
X#endif
X
X/* See tm-m68k.h.  0 means 68000 with no 68881.  */
X
X#define TARGET_DEFAULT 0
X
X/* These compiler options take an argument. We have none for now.  */
X
X#define WORD_SWITCH_TAKES_ARG(STR)	(0)
X
X/* -m68020 requires special flags to the assembler.  */
X
X/* -m68000 (on atari) need this flag to assembler, otherwise pc relative
X   code is produced where it should not be (in places where the
X   68000 only allows data ALTERABLE addressing modes) (++jrb 03/19/89) */
X#define ASM_SPEC "%{m68020:-mc68020}%{!m68020:-m68000}"
X
X/* Names to predefine in the preprocessor for this target machine.  */
X
X#if (defined(MINIX) || defined(atariminix))
X#define CPP_PREDEFINES "-DATARI_ST -Dminix -Dm68k"
X#else
X#define CPP_PREDEFINES "-Datarist -Dgem -Dm68k"
X#endif
X
X/* default exec dir */
X#ifndef STANDARD_EXEC_PREFIX
X#ifdef MINIX
X#define STANDARD_EXEC_PREFIX "/net/acae127/home/bammi/atari/cross-minix/lib/gc
c-"
X#else
X#ifdef atariminix
X#define STANDARD_EXEC_PREFIX "/usr/local/lib/gcc-"
X#else
X#define STANDARD_EXEC_PREFIX "/net/acae127/home/bammi/atari/cross-gcc/lib/gcc-
"
X#endif
X#endif
X#endif
X
X/* Alignment of field after `int : 0' in a structure.  */
X/* recent gcc's have this as 16, this is left in for the benfit of */
X /* older gcc */
X#undef EMPTY_FIELD_BOUNDARY
X#define EMPTY_FIELD_BOUNDARY 16
X
X/* Every structure or union's size must be a multiple of 2 bytes.  */
X
X#undef STRUCTURE_SIZE_BOUNDARY
X#define STRUCTURE_SIZE_BOUNDARY 16
X
X/* code seems to assume this... */
X#define DBX_DEBUGGING_INFO
X
X#ifndef HAVE_VPRINTF
X#define HAVE_VPRINTF 1
X#endif
X
X#ifdef abort
X#undef abort
X#define abort fancy_abort
X#endif
X
X
X/* the following stolen from tm-sun3.h, they seem to work better */
X/* This is how to output an assembler line defining a `double' constant.  */
X
X/* fake out isinf for !sun for now */
X#ifndef sun
X#define isinf(X) (0)
X#endif
X
X#undef ASM_OUTPUT_DOUBLE
X#define ASM_OUTPUT_DOUBLE(FILE,VALUE)					\
X  (isinf ((VALUE))							\
X   ? fprintf (FILE, "\t.double 0r%s99e999\n", ((VALUE) > 0 ? "" : "-")) \
X   : double_is_minus_zero ((VALUE))					\
X   ? fprintf (FILE, "\t.long 0x80000000,0\n")				\
X   : fprintf (FILE, "\t.double 0r%.20e\n", (VALUE)))
X
X/* This is how to output an assembler line defining a `float' constant.  */
X
X#undef ASM_OUTPUT_FLOAT
X#define ASM_OUTPUT_FLOAT(FILE,VALUE)					\
X  (isinf ((VALUE))							\
X   ? fprintf (FILE, "\t.single 0r%s99e999\n", ((VALUE) > 0 ? "" : "-")) \
X   : double_is_minus_zero ((VALUE))					\
X   ? fprintf (FILE, "\t.long 0x80000000\n")				\
X   : fprintf (FILE, "\t.single 0r%.20e\n", (VALUE)))
X
X#undef ASM_OUTPUT_FLOAT_OPERAND
X#define ASM_OUTPUT_FLOAT_OPERAND(FILE,VALUE)				\
X  (isinf ((VALUE))							\
X   ? fprintf (FILE, "#0r%s99e999", ((VALUE) > 0 ? "" : "-")) 		\
X   : double_is_minus_zero ((VALUE))					\
X   ? fprintf (FILE, "#0r-0.0")						\
X   : fprintf (FILE, "#0r%.9g", (VALUE)))
X
X#undef ASM_OUTPUT_DOUBLE_OPERAND
X#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)				\
X  (isinf ((VALUE))							\
X   ? fprintf (FILE, "#0r%s99e999", ((VALUE) > 0 ? "" : "-"))		\
X   : double_is_minus_zero ((VALUE))					\
X   ? fprintf (FILE, "#0r-0.0")						\
X   : fprintf (FILE, "#0r%.20g", (VALUE)))
X
X
X/* specs for start file and link specs */
X
X#ifndef CROSSATARI
X
X#ifdef atariminix
X#define STARTFILE_SPEC  \
X  "%{pg:/usr/local/lib/gcrtso.o%s}\
X   %{!pg:\
X         %{p:/usr/local/lib/mcrtso.o%s}\
X         %{!p:/usr/local/lib/crtso.o%s}}"
X#else /* atarist */
X#define STARTFILE_SPEC  \
X "%{mint:\
X     %{pg:$GNULIB$\\mgcrt0.o%s}\
X     %{!pg:\
X         %{p:$GNULIB$\\mmcrt0.o%s}\
X         %{!p:$GNULIB$\\mcrt0.o%s}}}\
X\
X  %{!mint:\
X     %{pg:$GNULIB$\\gcrt0.o%s}\
X     %{!pg:\
X         %{p:$GNULIB$\\mcrt0.o%s}\
X         %{!p:$GNULIB$\\crt0.o%s}}}"
X#endif
X
X#else	/* CROSSATARI */
X
X#ifdef MINIX
X#define STARTFILE_SPEC  \
X  "%{pg:/net/acae127/home/bammi/atari/cross-minix/lib/gcrtso.o%s}\
X   %{!pg:\
X         %{p:/net/acae127/home/bammi/atari/cross-minix/lib/mcrtso.o%s}\
X         %{!p:/net/acae127/home/bammi/atari/cross-minix/lib/crtso.o%s}}"
X#else
X#define STARTFILE_SPEC  \
X  "%{mint:\
X      %{pg:/net/acae127/home/bammi/atari/cross-gcc/lib/mgcrt0.o%s}\
X      %{!pg:\
X             %{p:/net/acae127/home/bammi/atari/cross-gcc/lib/mmcrt0.o%s}\
X             %{!p:/net/acae127/home/bammi/atari/cross-gcc/lib/mcrt0.o%s}}}\
X\
X  %{!mint:\
X      %{pg:/net/acae127/home/bammi/atari/cross-gcc/lib/gcrt0.o%s}\
X      %{!pg:\
X             %{p:/net/acae127/home/bammi/atari/cross-gcc/lib/mcrt0.o%s}\
X             %{!p:/net/acae127/home/bammi/atari/cross-gcc/lib/crt0.o%s}}}"
X#endif
X#endif /* CROSSATARI */
X
X#ifdef MINIX
X#define LIB_SPEC \
X  "%{mshort:/net/acae127/home/bammi/atari/cross-minix/lib/libc.a}\
X   %{!mshort:/net/acae127/home/bammi/atari/cross-minix/lib/libc32.a}"
X#else
X#ifdef atariminix
X#define LIB_SPEC \
X  "%{mshort:/usr/local/lib/libc.a}\
X   %{!mshort:/usr/local/lib/libc32.a}"
X#else /* atarist cross or native */
X#define LIB_SPEC \
X "%{mint:\
X   %{!gg:\
X         %{mshort:-lmint16 -lgnu16}\
X         %{!mshort:-lmint -lgnu}}\
X    %{gg:\
X         %{mshort:-lmintg16 -lgnugdb16}\
X         %{!mshort:-lmintg -lgnugdb}}}\
X\
X  %{!mint:\
X   %{!gg:\
X         %{mshort:-lgnu16}\
X         %{!mshort:-lgnu}}\
X    %{gg:\
X         %{mshort:-lgnugdb16}\
X         %{!mshort:-lgnugdb}}}"
X#endif
X#endif
X
X/* add -mint : meanining
X   pre-procees with -D__MINT__
X   compile with -mint	(target_flags & 0200) (this flag is
X	 currently not used by cc1, but maybe later)
X   link with mcrt0.o and -lmint -lgnu
X   
X */
X#undef TARGET_SWITCHES
X#define TARGET_SWITCHES  \
X  { { "68020", 5},				\
X    { "c68020", 5},				\
X    { "68881", 2},				\
X    { "bitfield", 4},				\
X    { "68000", -5},				\
X    { "c68000", -5},				\
X    { "soft-float", -0102},			\
X    { "nobitfield", -4},			\
X    { "rtd", 8},				\
X    { "nortd", -8},				\
X    { "short", 040},				\
X    { "noshort", -040},				\
X    { "fpa", 0100},				\
X    { "nofpa", -0100},				\
X    { "int", 0200},				\
X    { "noint", -0200},				\
X    { "", TARGET_DEFAULT}}
SHAR_EOF
if test 6489 -ne "`cat 'tm-atari.h' | wc -c`"
then
	echo shar: error transmitting "'tm-atari.h'" '(should have been 6489 ch
aracters)'
fi
echo shar: extracting "'toplev.diff'" '(508 characters)'
if test -f 'toplev.diff'
then
	echo shar: over-writing existing file "'toplev.diff'"
fi
sed 's/^X//' << \SHAR_EOF > 'toplev.diff'
X*** ../gcc-diff-1.38/toplev.c	Thu Jan  3 13:57:06 1991
X--- toplev.c	Fri Jan  4 11:58:50 1991
X***************
X*** 61,67 ****
X  #include "flags.h"
X  
X  #ifdef atarist
X! extern long _stksize = -1L;	/* for all sizes of ST's */
X  	/* -1 means malloc from own heap and keep all  of memory */
X  #endif /* atarist */
X  
X--- 61,67 ----
X  #include "flags.h"
X  
X  #ifdef atarist
X! long _stksize = -1L;	/* for all sizes of ST's */
X  	/* -1 means malloc from own heap and keep all  of memory */
X  #endif /* atarist */
X  
SHAR_EOF
if test 508 -ne "`cat 'toplev.diff' | wc -c`"
then
	echo shar: error transmitting "'toplev.diff'" '(should have been 508 ch
aracters)'
fi
echo shar: extracting "'xm-atari.h'" '(936 characters)'
if test -f 'xm-atari.h'
then
	echo shar: over-writing existing file "'xm-atari.h'"
fi
sed 's/^X//' << \SHAR_EOF > 'xm-atari.h'
X/* The following Macros control the compilation
X *
X *	CROSSATARI	defined when making cross compiler for TOS or Minix
X *	MINIX		defined when making cross compiler for MINIX only
X *	atariminix	defined when making compiler for MINIX
X *	atarist		defined when making compiler for TOS
X */
X
X/* we use an extra file, as we don't do links */
X
X/* generic m68k config file */
X
X#include "xm-m68k.h"
X
X/* exc that we don't want the funny alloca... */
X
X#if defined(__GNUC__)
X#  if defined(alloca)
X#    undef alloca
X#  endif
X#  define alloca __builtin_alloca
X#endif
X
X#if defined(sparc)
X# if !defined(alloca)
X#    include <alloca.h>
X# endif
X#endif
X
X/* #include "stddef.h" */
X
X
X/* for new-version (format 2) symsegs, as defined by the symseg.h
X   taken from gdb */
Xtypedef long CORE_ADDR;
X
X/* Oops.  Looks like this won't work anyhow; new GDB read syms 
X   incrementally, so we can't use it.  Use GDB 2.6; old symseg fmt...
X#define FORMAT_2_SYMSEG
X...*/
SHAR_EOF
if test 936 -ne "`cat 'xm-atari.h' | wc -c`"
then
	echo shar: error transmitting "'xm-atari.h'" '(should have been 936 cha
racters)'
fi
#	End of shell archive
exit 0
