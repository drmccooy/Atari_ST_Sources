.TH CPP 1 "30 May 1993"
.SH NAME
cpp \- a stand-alone C preprocessor
.SH SYNOPSIS
.B cpp 
[
.B \-CTV
] [
.BR \-P [012]
] [
.BR \-D name
]
.if n .ti +5
[
.BR \-D name = def
] [
.BR \-I directory
] [
.BR \-U name
]
.if n .ti +5
.if t .ti +.5i
[
.B \-ansi
] [
.BR \-f [no\-] c++-comments
] [
.BR -W [no\-] bad-chars
]
.if n .ti +5
[
.BR -W [no\-] nested-comments
] [
.I input-file
[
.I output-file
] ]
.SH DESCRIPTION
.LP
.B cpp
is a stand-alone C preprocessor, intended for use with C compilers such
as HSC which do not provided access to preprocessor output.  It
implements as closely as possible an ANSI standard C preprocessor,
including trigraphs, token pasting and stringizing.
.LP
.B cpp
optionally accepts two filenames as arguments.
.I input-file
and
.I output-file
are, respectively, the input and output files for the preprocessor.
If not specified, or if given as `\-', they default to the standard
input and the standard output, respectively.
.SH OPTIONS
.IP \fB\-C\fP
Pass all comments (except those that appear on 
.B cpp
directive lines) through the preprocessor.
By default,
.B cpp
strips out C-style comments.
.IP \fB\-P\fP[012]
Preprocess the input without producing the line control
information used by the next pass of the C compiler.  A numeric argument
can be passed to -P:  0 specifies that no line control information
control is generated, and is equivalent to -P; 1 specifies that normal
line control information is generated, which is the default; and 2
specifies that line control information is generated in the form of
preprocessor 
.B #line
directives.
.IP \fB\-T\fP
Translate trigraphs in the input file.  This behavior is implied by the
.B \-ansi
option.
.IP "\fB\-D\fP name"
Define
.I name
as 1 (one). 
This is the same as if a
.BR \-D name =1
option appeared on the 
.B cpp
command line, or as if a
.RS
.IP
.BR #define " name " 1
.RE
.IP
line appeared in the source file that 
.B cpp
is processing.
.IP \fB\-D\fPname\fB=\fPdef
Define
.I name
as if by a
.B #define
directive.
This is the same as if a
.RS
.IP
.BR #define " name " def
.RE
.IP
line appeared in the source file that 
.B cpp
is processing.  The
.B \-D
option has lower precedence than the
.B \-U
option; that is, if the same name is used in both a
.B \-U
option and a
.B \-D
option, the name will be undefined regardless of the order of the options.
.br
.ne 8
.IP \fB\-I\fPdirectory
Insert 
.I directory
into the search path for
.B #include
files with names not beginning with
.RB  ` / "', `" \\\\ \',
or a drive specifier.
.I directory
is inserted ahead of the standard list of ``include'' directories.
Thus,
.B #include
files with names enclosed in
double-quotes (\fB"\fR)
are searched for first in the directory of the file with the
.B #include
line, then in directories named with
.B \-I
options, and lastly, in directories from the standard list.
For
.B #include
files with names enclosed in angle-brackets
.RB  ( <\|> ),
the directory of the file with the
.B #include
line is not searched.
See
.B USAGE
below for exact details of this search order.
.IP \fB\-S\fP[filename]
Specify an alternate configuration file.  If
.I filename
is present, the specified file is read instead of the default
configuration file; if
.I filename
is absent, the default configuration file is simply not read.  See
.B USAGE
below for further details.
.IP \fB\-U\fPname
Remove any initial definition of
.IR name ,
where
.I name
is a symbol that is predefined by the preprocessor.
.IP \fB\-V\fP
Print version information to
.BR stderr .
.IP \fB\-ansi\fP
Define the preprocessor token
.B _\|\|_STDC_\|\|_
to have value 1, and enable trigraph translation.  To get
.B _\|\|_STDC_\|\|_
without trigraph translation, you can specify the options
.B \-ansi
.BR \-T .
.LP
The following
.B \-f
and
.B \-W
options can be negated by adding a
.I no\-
before the option name.  Some are on by default.
.IP \fB\-fc++-comments\fP
Support the C++ comment indicator
.RB ` /\|/ \'.
With this option active, everything on the line after the
.B /\|/
is treated as a comment.  Off by default.
.IP \fB\-Wbad-chars\fP
Issue a warning if a character that cannot legally appear in a C program
appears in the input.  On by default.
.IP \fB\-Wnested-comments\fP
Issue a warning if a comment-start character sequence
.RB (` /\|* \',
and
.RB ` /\|/ \'
if
.B \-fc++-comments
is active) appears in a comment.  Off by default.
.SH USAGE
If you are familiar with C, you should already know about the basic
workings of
.BR cpp .
We will not go into a detailed description here, since any good book on
C could do better; instead, we will describe details particular to this
implementation.
.SS "\fIDirectory Search Order\fP"
.LP
A file specified in an
.B #include
directive will be searched for in the following directories, in order:
.RS
.IP 1.
The directory of the file that contains the 
.B #include 
directive, if the directive is of the form `\fB#include\fP
\*(lqfilename\*(rq'.
.IP 2.
The directories specified by
.B \-I
options, in the order they were specified.
.IP 3.
The list of directories specified in the
.B INCLUDE
environment variable, in order.
.RE
.SS "\fISpecial Names\fR"
.LP
The following macros are predefined by
.BR cpp :
.RS
.IP \fB_\|\|_STDC_\|\|_\fP
Expands to 1 if the
.B \-ansi
option is specified.
.IP \fB_\|\|_LINE_\|\|_\fP
Expands to an integer constant representing the current line number in
the current input file.
.IP \fB_\|\|_FILE_\|\|_\fP
Expands to a string constant representing the name of the current input
file.
.IP \fB_\|\|_DATE_\|\|_\fP
Expands to a string constant of the form "Mmm dd yyyy" representing the
date on which preprocessing was initiated.
.IP \fB_\|\|_TIME_\|\|_\fP
Expands to a string constant of the form "hh:mm:ss" representing the
system time at which preprocessing was initiated.
.IP \fB_\|\|_INCLUDE_LEVEL_\|\|_\fP
Expands to an integer constant representing the current depth of nested
.B #include
files.
.RE
.SS "\fIConfiguration files\fP"
.LP
.B cpp
uses a configuration file to set up site-specific predefined macros.  By
default, the directories specified in the
.B LIB
environment variable are searched in order for the file
.IR cpp_defs.h ;
an alternate file can be specified from the command line with the
.B \-S
option.
.LP
The configuration file is read just like a normal input file, except
that text other than preprocessor directives is not passed through to
the output file.  Normally the configuration file will contain only
comments and preprocessor directives.  In addition, two special pragmas
are available within the configuration file only:
.RS
.IP "#pragma CPP_cmdline_arg \fIoption\fP"
The single token
.I option
is processed as though it had appeared as a command-line option.  The
option may be undone from the command line, except as indicated below.
.IP "#pragma CPP_delayed"
Normally, the configuration file is processed before command-line
options are processed, to allow the commands therein to be overridden by
command-line options.  This pragma causes the command line to be
processed before the remainder of the file, allowing conditional setup
based on parameters set from the command line.  Note that macro
definitions and command-line specifications made after this pragma
cannot be undone from the command line.
.RE
.LP
For example, the following configuration file activates C++ comments by
default, and sets the macro
.I _PROTO()
according to the presence of the
.B \-ansi
option:
.nf

    #pragma CPP_cmdline_arg -fc++-comments
    #pragma CPP_delayed
    #ifdef __STDC__
    #  define _PROTO(x) x
    #else
    #  define _PROTO(x) ()
    #endif

.fi
.SH SEE ALSO
Documentation for your C compiler
.LP
Any good book on C.
.br
.ne 5
.SH DIAGNOSTICS
.LP
The error messages produced by
.B cpp
are intended to be self-explanatory.  The line number and filename
where the error occurred are printed along with the diagnostic.
.SH BUGS
None that I know of, but there's almost always One More Bug(TM).  If you
should find one, please report it to me, Scott Bigham, at
dsb@cs.duke.edu.
