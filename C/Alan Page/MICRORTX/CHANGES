
              MICRO RTX Version 1.10 Release Notes

IMPORTANT

Changes to the MICRO RTX kernel that are not reflected in the
manual are documented here.

Information in this file superceeds that in the manual.

Read this file carefully BEFORE writing any MICRO RTX code.



CONFIGURATION AND INSTALLATION

The 'rtxboot.prg' executable file loads the MICRO RTX kernel
and then exits.  It may be loaded into the AUTO folder of the
TOS boot disk, and then MICRO RTX will load each time you boot
the system.

If you attempt to run a MICRO RTX application without first
loading the MICRO RTX kernel, your program will not run
(you will get a fatal error message).

Once MICRO RTX is loaded, it remains in memory until the
computer is reset or turned off.


IMPORTANT PROGRAMMING HINTS

Programs should never modify system variables directly.  Always
use the system calls to modify system variables.  When you set
a variable directly it immediately affects all running processes
which might be in the middle of a disk I/O or anything else.

You must use the system services provided by the Bios to modify
system variables.

It is important that one uses the Micro RTX facilities when
synchronizing Interrupt Service Procedures (ISPs) with background
tasks.  Especially cases such as waiting for a certain number of
system ticks in a tight loop that wastes valuable CPU time,
instead of using the Micro RTX p_pause service which allows other
processes to run during the pause interval.

The temptation is strong, but these sorts of poor programming
practices will always catch up to you!


GSX CALLS

The GSX system calls are not reentrant and may not be called
by more than one process concurrently (unlike the BIOS and
GEMDOS compatible RTX services).

If you want to use several processes to perform GSX graphics
calls, you must implement your own lock-out technique (See
"Message Queues as Semaphores" in the Micro RTX manual).


NEW SYSTEM CALL

There is an additional system call that is not described in the
Micro RTX manual.  It adusts the memory quota allowed in a GEMDOS
Malloc(-1L) call.  Malloc(-1L) in RTX returns the size of the
largest free memory segment.  The maximum value returned by
Malloc(-1L) can be controlled with the following system call:

	long Mquota(size)
	long size;

	Set the maximum value ever returned by a Malloc(-1L) to
	'size' bytes.  If the 'size' is larger than the biggest
	free memory segment in the system, in has no effect on
	the returned value.  When the largest segment is larger
	than 'size', then Malloc(-1) will return 'size'.

	This system calls may be used to limit the amount of
	memory a program may aquire via Malloc(-1).  It is
	usefull for programs that Malloc all available
	memory.

	The current quota is returned by the Mquota call. A size
	of -1L has no effect on the quota seting an may be used
	to determine what the quote is set to.

