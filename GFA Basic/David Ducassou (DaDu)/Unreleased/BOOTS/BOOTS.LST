'
' ~FORM_ALERT(1,"[3][This file is too big |(over 512 bytes).][   Ok   ]")
'
'       To add:
' save boot on disk
' use .DAT (omikron)
'
' fdest$="E:\DEVPAC\A\BOOTS\TST.BIN"
'
RESERVE 100000
'
extension$="*.BIN"
info0$=" DADU BOOTS MANIPULATOR  v1.0  04/08/92"
PRINT CHR$(27);"v";
'
old_free%=FRE(7)
DIM inf_boot$(511),boot$(511),nature_du_boot%(511)
DIM les_2_du_bout$(511)
' path$="\"
' path$="C:\IMPACT.UTI\OMIKRON.KIL\"
path$="E:\GFABASIC\DIVERS\BOOTS\"
'
LET remember!=TRUE
'
'
DO
debut_du_prg:
  nb_de_boot%=0
  CLS
  ' PRINT "              DADU's Killer Choice v1.0   19/04/1992, PhotoWare."
  ' PRINT "                R‚alis‚ par DAvid DUcassou ( DADU-SOFTWARE )"
  '
  PRINT info0$
  PRINT "Program SHAREWARE written by DAvid DUcassou, route de monsegur, 40700 Hagetmau, France.  ";
  PRINT "To be a registred user, sent me: a postcard of your town, or a photo of you. Join a stamped and adressed envelop if you wish a reply."+CHR$(0)
  '
  PRINT
  PRINT "     This prg is able to use a KILLER.DAT (boots bank file) created with OMIKRON KILLER v2.x (Copyright OMIKRON). ";
  ' PRINT "This prg was done with GfA BASIC v3.50F."
  PRINT
  PRINT "     This prg permit to remove boots from a bank file (key 2). Ex: games, demos, ... ";
  PRINT "Some boots can be useless, each boot takes 544 bytes."+CHR$(0)
  '
  PRINT "     Do a copy of your files (.DAT) and your disk before to use this prg, you use it at your own risks, so be carefull."
  PRINT "     You should use this prg with 2 drives (ex: a disk drive and a ramdisk)."
  ' repeter_question:
  PRINT
  PRINT "1  write a boot from a .DAT file to a disk."
  PRINT "2  create a .DAT from an existing .DAT"
  PRINT "3  insert boots in a .DAT (and/or create a .DAT)"
  PRINT
  PRINT "5  save a bootsector from disk A to a .BIN file."
  PRINT "6  write a bootsector from a .BIN file to disk A."
  PRINT "7  run a boot from a .BIN file"
  PRINT
  PRINT "9  quit"
  '
  t
  '
  IF t$="Q" OR t%=17 OR t$="9"     !       CTRL Q
    RESERVE
    EDIT
  ENDIF
  '
  SELECT t$
  CASE "1"
    @injecter
  CASE "2"
    @tri
  CASE "3"
    @add_boot_to_dat
  CASE "5"
    @get_boot
  CASE "6"
    @write_boot
  CASE "7"
    @run_boot
  ENDSELECT
  '
LOOP
'
> PROCEDURE get_boot
  nbr&=0
  '
  DO
    DEFMOUSE 0
    CLS
    PRINT info0$+".  Select the name of the file to get."
    PRINT "Already gotten: ";nbr&
    FILESELECT path$+extension$,"",fdest$
    EXIT IF fdest$=""
    '
    DEFMOUSE 2
    buffer$=STRING$(512,0)
    dummy&=XBIOS(8,L:VARPTR(buffer$),L:0,W:0,W:1,W:0,W:0,W:1)
    '
    BSAVE fdest$,VARPTR(buffer$),LEN(buffer$)
    INC nbr&
    '
    path$=MID$(fdest$,1,RINSTR(fdest$,"\"))
  LOOP
RETURN
> PROCEDURE write_boot
  nbr&=0
  problem!=FALSE
  '
  DO
    DEFMOUSE 0
    CLS
    PRINT info0$+".  Select the boot file to write to disk."
    PRINT "Already written: ";nbr&
    FILESELECT path$+extension$,"",fdest$
    EXIT IF fdest$=""
    '
    DEFMOUSE 2
    boot$=STRING$(512,0)
    OPEN "I",#3,fdest$
    IF LOF(#3)>512
      ~FORM_ALERT(1,"[3][This file is too big |(over 512 bytes).][   Ok   ]")
      problem!=TRUE
    ELSE
      BGET #3,V:boot$,512
    ENDIF
    CLOSE #3
    '
    IF problem!=FALSE
      sector_buf$=STRING$(512,0)
      '  PRINT "Reading current boot sector..."
      ~XBIOS(8,L:VARPTR(sector_buf$),L:0,W:0,W:1,W:0,W:0,W:1)
      '
      new_sect$=STRING$(512,0)
      BMOVE V:sector_buf$,V:new_sect$,28
      '
      BMOVE V:boot$,V:new_sect$,2
      BMOVE V:boot$+28,(V:new_sect$)+28,484
      '
      somme%=0
      FOR i%=0 TO 508 STEP 2
        ADD somme%,DPEEK(VARPTR(new_sect$)+i%)
        somme%=somme% AND 65535
      NEXT i%
      ck1%=&H1234-somme%
      DPOKE (VARPTR(new_sect$)+510),ck1%
      '
      ' PRINT "Writing the new boot sector..."
      ~XBIOS(9,L:VARPTR(new_sect$),L:0,W:0,W:1,W:0,W:0,W:1)
      '
      path$=MID$(fdest$,1,RINSTR(fdest$,"\"))
      INC nbr&
    ENDIF
  LOOP
RETURN
> PROCEDURE run_boot
  '
  INLINE run_boot%,5990
  problem!=FALSE
  '
  CLS
  PRINT info0$+".  Select the boot file to run."
  '
  FILESELECT path$+extension$,"",ftr$
  IF ftr$<>""
    '
    workspace%=MALLOC(6000)
    BMOVE run_boot%,workspace%,5990
    '
    OPEN "I",#1,ftr$
    IF LOF(#1)>512
      ~FORM_ALERT(1,"[3][This file is too big |(over 512 bytes).][   Ok   ]")
      problem!=TRUE
    ELSE
      BGET #1,workspace%+400,LOF(#1)
    ENDIF
    CLOSE #1
    '
    IF problem!=FALSE
      CLS
      CALL workspace%
    ENDIF
    '
    t
    ~MFREE(workspace%)
    '
  ENDIF
  '
RETURN
> PROCEDURE t
  t%=INP(2)
  t$=UPPER$(CHR$(t%))
RETURN
'
'       Rajouter if EXIST ...
> PROCEDURE tri
  CLS
  PRINT "Select source .DAT file"
  LET remember!=FALSE
  GOSUB entree_des_boots_dans_les_dims
  LET remember!=TRUE
  '
  IF source_file$<>""
    CLS
    PRINT "Name of the file where will be copied the boots that you want to keep."
    '
    FILESELECT path$+"*.DAT","",file$
    '
    IF file$=""
      GOTO tri_exit
    ENDIF
    '
    CLS
    PRINT info0$+"."
    PRINT
    PRINT "Now, you will press Y if you want to copy a boot, else: N."
    PRINT
    PRINT
    '
    OPEN "O",#2,file$
    ' ou:   OPEN "A",#2,file$
    '
    FOR i%=1 TO nb_de_boot%
    refait:
      PRINT "#";i%;" ?    ";inf_boot$(i%);"     ";
      t
      IF t$<>"N" AND t$<>"Y"
        PRINT "wrong key pressed! "
        GOTO refait
      ENDIF
      '
      IF t$="Y"
        PRINT "Yes (copied)"
        PRINT #2,inf_boot$(i%);
        PRINT #2,les_2_du_bout$(i%);
        PRINT #2,boot$(i%);
      ELSE
        PRINT
      ENDIF
    NEXT i%
    file%=LOF(#2)
    CLOSE #2
    '
    PRINT
    PRINT file$;" = ";file%;" bytes."
    PRINT
    GOSUB joke
    REPEAT
      t
    UNTIL t$<>"N" AND t$<>"Y"
  tri_exit:
  ENDIF
RETURN
> PROCEDURE injecter
  CLS
  PRINT "You will have to choose the .DAT file that contain the boot to write on disk."
  PRINT
  t
  '
  GOSUB entree_des_boots_dans_les_dims
  IF source_file$<>""
    '
  injecter_pour_de_bon:
    CLS
    PRINT info0$+". WRITE A BOOT TO A DISK"
    PRINT
    PRINT
    PRINT "Insert target disk in disk-drive A"
    PRINT
    PRINT "Number of the choosen boot ? (0 to quit)"
    INPUT "->",to_inject%
    '
    IF to_inject%=0 OR to_inject%>nb_de_boot%
      GOTO injecter_exit
    ENDIF
    IF nature_du_boot%(to_inject%)=1
      '  ALERT 1,"D‚sol‚,|Cette version ne vous|permet d'injecter|un virus.",1,"OOOPS",dummy%
      IF dummy&=2
        GOTO injecter_exit
      ENDIF
    ENDIF
    '
    PRINT
    PRINT "Attention !, cette op‚ration est TRES DANGEREUSE. Si vous h‚sitez, demandez … un ami plus averti."
    PRINT "Voulez-vous que le boot soit ‚crit tel quel ? (pour les jeux et d‚mos, ";
    PRINT "si la disquette n'a pas les memes paramŠtres que le boot (nbr secteurs, pistes, faces), ";
    PRINT "elle sera rendue probablement inutilisable !)."
    PRINT
    PRINT "O pour l'‚crire tel quel, N pour l'adapter, ESC pour quitter."
    PRINT
    t
    '
    boot$=boot$(to_inject%)
    '
    PRINT
    PRINT
    PRINT "Writing..."
    PRINT
    '
    IF t$="O"
      ~XBIOS(9,L:V:boot$,L:0,W:0,W:1,W:0,W:0,W:1)!                                            by DADU
    ELSE IF t$="N"
      sector_buf$=STRING$(512,0)
      '  PRINT "Reading current boot sector..."
      ~XBIOS(8,L:VARPTR(sector_buf$),L:0,W:0,W:1,W:0,W:0,W:1)
      '
      new_sect$=STRING$(512,0)
      BMOVE V:sector_buf$,V:new_sect$,28
      '
      BMOVE V:boot$,V:new_sect$,2
      BMOVE V:boot$+28,(V:new_sect$)+28,484
      '
      somme%=0
      FOR i%=0 TO 508 STEP 2
        ADD somme%,DPEEK(VARPTR(new_sect$)+i%)
        somme%=somme% AND 65535
      NEXT i%
      ck1%=&H1234-somme%
      DPOKE (VARPTR(new_sect$)+510),ck1%
      '
      ' PRINT "Writing the new boot sector..."
      ~XBIOS(9,L:VARPTR(new_sect$),L:0,W:0,W:1,W:0,W:0,W:1)
    ELSE IF t%=27
      GOTO injecter_exit
    ELSE
      GOTO injecter_pour_de_bon
    ENDIF
    '
    PRINT
    PRINT "Finished."
    '
    t
    GOTO injecter_pour_de_bon
  injecter_exit:
  ENDIF
RETURN
'
> PROCEDURE add_boot_to_dat
youpla:
  CLS
  PRINT "        ADD BOOTS TO A .DAT FILE"
  PRINT "Select .DAT file to use, or type a .DAT to create."
  FILESELECT path$+"*.DAT","",source_file$
  IF source_file$=""
    GOTO dehors
  ENDIF
  '
  the_dat_file_exist=TRUE
  IF EXIST(source_file$)=FALSE
    the_dat_file_exist=FALSE
  ENDIF
  '
  dummy&=FORM_ALERT(2,"[2][Get boots from disk A, |or .BIN file ?.][ Disk A | .BIN  ]")
  buffer$=STRING$(512,0)
  IF dummy&=1
    ~FORM_ALERT(1,"[0][Insert disk to read |in drive A.][   Ok   ]")
    '
    DEFMOUSE 2
    buffer$=STRING$(512,0)
    dummy&=XBIOS(8,L:VARPTR(buffer$),L:0,W:0,W:1,W:0,W:0,W:1)
    DEFMOUSE 0
  ELSE
    FILESELECT path$+"*.BIN","",source_file$
    IF source_file$=""
      GOTO dehors
    ENDIF
    path$=MID$(fdest$,1,RINSTR(fdest$,"\"))
    DEFMOUSE 2
    OPEN "I",#3,source_file$
    BGET #3,V:buffer$,512
    CLOSE #3
    DEFMOUSE 0
  ENDIF
  '
  CLS
  identifie%=FORM_ALERT(3,"[2][What is this boot ?.][Virus|AntiVirus|Game ]")
  '
  reset%=FORM_ALERT(2,"[2][Does it resist to reset ? ][It resist|No]")
  '
  lk$=""
  PRINT
  PRINT "You can enter 30 characters of description about the boot:"
  FORM INPUT 30,lk$
  IF LEN(lk$)<30
    lk$=lk$+SPACE$(30-LEN(lk$))
  ENDIF
  '
  PRINT the_boot$
  dummy&=FORM_ALERT(1,"[1][Do you really want to add |this boot to:| |"+source_file$+" ][ Add it |Cancel]")
  IF dummy&=1
    the_boot$=""
    the_boot$=lk$+CHR$(identifie%)
    IF reset%=0
      the_boot$=the_boot$+CHR$(0)
    ELSE
      the_boot$=the_boot$+CHR$(85)
    ENDIF
    the_boot$=the_boot$+buffer$
    '
    IF the_dat_file_exist=FALSE
      OPEN "O",#3,source_file$
    ELSE
      OPEN "A",#3,source_file$
    ENDIF
    PRINT #3,the_boot$;
    CLOSE #3
  ENDIF
  '
dehors:
  dummy&=FORM_ALERT(1,"[2][Add another boot ? ][ Add |Quit]")
  IF dummy&=1
    GOTO youpla
  ENDIF
RETURN
> PROCEDURE entree_des_boots_dans_les_dims
  FILESELECT path$+"*.DAT","KILLER.DAT",source_file$
  '
  IF source_file$<>""
    PRINT "Boots names will slide. ";
    IF remember!=TRUE
      PRINT "Remember the number of the one that interrest you."
    ELSE
      PRINT
    ENDIF
    '
    t
    PRINT
    PRINT "You can press SPACE for a pause, press anykey to list..."
    PRINT
    OPEN "I",#1,source_file$
    '
    file_length%=LOF(#1)
  lit_encore:
    '
    lk$=""
    FOR i%=1 TO 32
      l%=INP(#1)
      l$=CHR$(l%)
      lk$=lk$+l$
    NEXT i%
    '
    '
    INC nb_de_boot%
    '
    inf_boot$(nb_de_boot%)=LEFT$(lk$,LEN(lk$)-2)
    les_2_du_bout$=RIGHT$(lk$,2)
    les_2_du_bout$(nb_de_boot%)=RIGHT$(lk$,2)
    lk$=""
    '
    PRINT nb_de_boot%;" ";inf_boot$(nb_de_boot%);
    '
    identifie%=ASC(LEFT$(les_2_du_bout$,1))
    reset%=ASC(RIGHT$(les_2_du_bout$,1))
    '
    IF identifie%=0
      PRINT "THE KILLER, ";
    ELSE IF identifie%=1
      PRINT "VIRUS, ";
    ELSE IF identifie%=2
      PRINT "ANTIVIRUS, ";
    ELSE IF identifie%=3
      PRINT "JEU, ";
    ENDIF
    '
    nature_du_boot%(nb_de_boot%)=identifie%
    '
    IF reset%=0
      PRINT "RESISTE AU RESET."
    ELSE IF reset%=85
      PRINT "NORMAL."
    ENDIF
    '
    t$=INKEY$
    IF t$=" "
      ~INP(2)
    ENDIF
    '
    boot$(nb_de_boot%)=STRING$(512,0)
    BGET #1,V:boot$(nb_de_boot%),512
    '
    IF EOF(#1)<>TRUE
      GOTO lit_encore
    ENDIF
    '
    CLOSE #1
    '
    PRINT
    PRINT "   ";nb_de_boot%;" boots  ( ";file_length%;" bytes )."
  again:
    t
    IF t$=" "
      PRINT CHR$(7);
      GOTO again
    ENDIF
  ENDIF
RETURN
> PROCEDURE joke
  joke&=RANDOM(4)
  IF joke&=0
    PRINT "No problemo."
  ELSE IF joke&=1
    PRINT "R.A.S.   (rien … signaler)"
  ELSE IF joke&=2
    PRINT "L'op‚ration a ‚t‚ un succŠs, capitaine !."
  ELSE IF joke&=3
    PRINT "Message de kirk … la passerelle: tout s'est bien pass‚."
  ELSE IF joke&=4
    PRINT "Op‚ration r‚ussie, retour … la base."
  ENDIF
RETURN
