'
'
'         DEPAKICE  ->  DEPACK-D
'
'        avant de compiler:
'       RSC_FILE="DEPACK_D.RSC"
'       FORM_ALERT   DEPACK-D is a shareware
'
' Encod‚:          " REALISE PAR DUCASSOU DAVID "
little_protection$="XSFBMJTFXQBSXEVDBTTPVXEBWJEX"
'
IF XBIOS(4)=0
  PRINT CHR$(7)
  dummy&=FORM_ALERT(2,"[3][|DEPACK-D prefers a |highter resolution.][Continue |Quit]")
  IF dummy&=2
    EDIT
  ENDIF
ENDIF
'
RESERVE 40000
'
scr_file$="DEPACK_D.SCR"
' rsc_file$="E:\dd\DEPACK_D.RSC"
rsc_file$="DEPACK_D.RSC"
'  v1.0:  24/05
version$="v1.2 22/06/92  by DAvid DUcassou. "    ! checksum
path_s$="*.*"
path_d$="*.*"
chemin$="\"
depack_only!=FALSE
DIM reg%(15)              ! les registres
PRINT CHR$(27);"v";       ! d‚passement de texte autoris‚
interface!=TRUE           ! fonctionnement sous GEM
'
'
'   ***  TEST CHECKSUM  version$  ***
'
FOR dummy&=1 TO LEN(version$)
  sum%=sum%+ASC(MID$(version$,dummy&,1))
NEXT dummy&
' PRINT sum%
' t
IF sum%<>2386
  dummy&=0
  RESERVE -1
  EDIT
ENDIF
'
IF EXIST(scr_file$)=TRUE
  read_scr_file
  use_scr_files
  RESERVE -1
  EDIT
ENDIF
'
dummy&=FORM_ALERT(1,"[1][|DEPACK-D is |a shareware product.][    Ok    ]")
'
'       ********************
' Equivalence issues du fichier ressource
' et converties par CONVERT3.PRG
'
' resource set indicies for DEPACK_D
LET menu&=0   ! form/dialog
LET cadre1&=0   ! BOX in tree MENU
LET depack&=1   ! BUTTON in tree MENU
LET quit&=2   ! BUTTON in tree MENU
LET menuvers&=8   ! TEXT in tree MENU
LET informat&=9   ! BUTTON in tree MENU
LET autodbut&=10   ! BUTTON in tree MENU
LET info&=1   ! form/dialog
LET infobox&=0   ! BOX in tree INFO
LET inf1&=3   ! TEXT in tree INFO
LET inf2&=5   ! TEXT in tree INFO
LET inf3&=7   ! TEXT in tree INFO
LET inf4&=9   ! TEXT in tree INFO
LET inf5&=11   ! TEXT in tree INFO
LET infook&=13   ! BUTTON in tree INFO
LET author&=2   ! form/dialog
LET authorbx&=0   ! BOX in tree AUTHOR
LET authorok&=10   ! BUTTON in tree AUTHOR
LET autod&=3   ! form/dialog
LET autodbox&=0   ! BOX in tree AUTOD
LET autodok&=3   ! BUTTON in tree AUTOD
'
'
app_id&=APPL_INIT()
'
IF RSRC_LOAD(rsc_file$)=0   ! chargement ressource
  ~FORM_ALERT(1,"[3][|Can't find DEPACK_D.RSC ][  Ok  ]")
  '  ~FORM_ALERT(1,alerte1$)
  ~APPL_EXIT()
  RESERVE -1
  END
ENDIF
'
' nom1$="LE MARCHAND"
' secu1$="15411589465"
'
DO
  '
  DEFMOUSE 0
  @gere_menu
  '
  IF sortie_bis&=depack&
    '
    IF interface!=TRUE                  ! inutile... mais bon...
      lot_of_files&=FORM_ALERT(1,"[2][Do you have a |lot of files |to depack ?.][  Yes  |  No  ]")
    ENDIF
    '
    ' IF BTST(OB_STATE(adr_form%,diska&),0)
    '
  depack_others:
    '
    FILESELECT chemin$+path_s$,"",file$
    '
    IF file$<>""
      depack_it!=FALSE
      gere_info
      IF depack_it!=TRUE
        depack
      ENDIF
      '
      chemin$=MID$(file$,1,RINSTR(file$,"\"))
      '
      IF lot_of_files&=1
        GOTO depack_others
      ENDIF
    ENDIF
    '
  ELSE IF sortie_bis&=informat&
    @gere_authorbx
  ELSE IF sortie_bis&=autodbut&
    @gere_autod
    '
  ENDIF
  '
  '
LOOP
'
~RSRC_FREE()
~APPL_EXIT()
RESERVE -1
EDIT
'
'
> PROCEDURE depack
  '
  '  header$=STRING$(4,0)
  '  unpacked_size$=STRING$(4,0)
  '  packed_size$=STRING$(4,0)
  '  unpacked_size%=0
  '  packed_size%=0
  '  taille%=0
  '
  IF MALLOC(-1)<unpacked_size%+1000
    dummy&=FORM_ALERT(1,"[3][|Not enough RAM avaible |to work... ][   Ok   ]")
  ELSE
    sample%=MALLOC(unpacked_size%)
    '
    IF sample%<1
      dummy&=FORM_ALERT(1,"[3][|MALLOC error !|("+STR$(unpacked_size%)+" b) ][  OOOPS  ]")
    ELSE
      '
      BLOAD file$,sample%
      '
      DEFMOUSE 2
      '
      FOR iik&=0 TO 15
        reg%(iik&)=0
      NEXT iik&
      '
      IF header$="Ice!"
        INLINE dpak_ice2_12%,590
        reg%(8)=sample%
        IF depack_only!=FALSE
          RCALL dpak_ice2_12%,reg%()
        ENDIF
      ELSE IF header$="ICE!" OR header$="AU5!"
        INLINE dpak_ice2_4%,408
        reg%(8)=sample%
        IF depack_only!=FALSE
          RCALL dpak_ice2_4%,reg%()
        ENDIF
      ELSE IF header$="FIRE"
        '   FIREUNP2.S
        INLINE dpak_fire2%,446
        reg%(8)=sample%
        IF depack_only!=FALSE
          RCALL dpak_fire2%,reg%()
        ENDIF
      ELSE IF header$="ATOM"
        ' … propos du INLINE qui suit:  RESTORE_M = 0       PIC_ALGO=0
        INLINE dpak_atom_3_3%,390
        reg%(8)=sample%
        IF depack_only!=FALSE
          RCALL dpak_atom_3_3%,reg%()
        ENDIF
      ELSE IF header$="ATM5"
        ' … propos du INLINE qui suit:  RESTORE_M = 0       PIC_ALGO=1
        INLINE dpak_atom_3_5%,560
        reg%(8)=sample%
        RCALL dpak_atom_3_5%,reg%()
      ENDIF
      '
      '  a=disksize%
      '
    exit:
      '
      DEFMOUSE 0
      IF interface!=TRUE
        dummy&=FORM_ALERT(1,"[2][|Save under the same name ? |][  Ok |No,change name]")
        IF dummy&=2
        repeter_s:
          FILESELECT chemin$+path_s$,"",file_d$
          file$=file_d$
          '
          IF EXIST(file_d$)=TRUE
            dummy&=FORM_ALERT(1,"[3]["+file_d$+" |already exist !.][ Continue | Change ]")
            IF dummy&=2
              GOTO repeter_s
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      '
      IF file$<>""
        DEFMOUSE 2
        BSAVE file$,sample%,unpacked_size%
        DEFMOUSE 0
      ENDIF
      '
      ~MFREE(sample%)
      '
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE gere_menu
  LOCAL sortie&,adr_form%
  ~WIND_UPDATE(3)       ! Prenons le controle de la situation
  ~RSRC_GADDR(0,menu&,adr_form%)   ! Chercher adresse du formulaire
  ~FORM_CENTER(adr_form%,x&,y&,w&,h&) ! le centre
  ~FORM_DIAL(0,0,0,0,0,x&,y&,w&,h&)
  ~FORM_DIAL(1,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  CHAR{{OB_SPEC(adr_form%,menuvers&)}}=version$
  ~OBJC_DRAW(adr_form%,0,10,x&,y&,w&,h&)
  '
  '
  sortie&=FORM_DO(adr_form%,0)
  OB_STATE(adr_form%,sortie&)=BCLR(OB_STATE(adr_form%,sortie&),0)
  ~FORM_DIAL(2,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&)
  ~WIND_UPDATE(2)       ! rendons le controle de la situation
  ' Sommes nous sortis avec Confirmer ou Annuler?
  '
  IF sortie&=quit&
    ~RSRC_FREE()
    ~APPL_EXIT()
    RESERVE -1
    EDIT
  ENDIF
  '
  '  IF sortie&=okpremie&
  '  IF BTST(OB_STATE(adr_form%,diska&),0)
  '  ~FORM_ALERT(1,alerte2$)   ! Vous avez choisit A
  ' ELSE
  '  ~FORM_ALERT(1,alerte3$)   ! Vous avez choisit B
  ' ENDIF
  ' ENDIF
  '
  sortie_bis&=sortie&
  '
RETURN
> PROCEDURE gere_second
  LOCAL sortie&,adr_form%
  ~WIND_UPDATE(3)         !prenons le controle de la situation
  ~RSRC_GADDR(0,timerr&,adr_form%)   ! Chercher adresse du formulaire
  ' Nous allons "poker" dans les champs ‚ditable,
  ' des infos qui pourraient par exemple ˆtre issus
  ' d'une fiche d‚j… rempli,par l'utilisateur
  '  CHAR{{OB_SPEC(adr_form%,nom&)}}=nom1$
  '  CHAR{{OB_SPEC(adr_form%,timerval&)}}="012"
  ~FORM_CENTER(adr_form%,x&,y&,w&,h&) ! le centre
  ~FORM_DIAL(0,0,0,0,0,x&,y&,w&,h&)
  ~FORM_DIAL(1,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~OBJC_DRAW(adr_form%,0,10,x&,y&,w&,h&)
  sortie&=FORM_DO(adr_form%,nom&)
  OB_STATE(adr_form%,sortie&)=BCLR(OB_STATE(adr_form%,sortie&),0)
  ~FORM_DIAL(2,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&)
  ~WIND_UPDATE(2)    !rendons le controle de la situation
  ' Sommes nous sortis avec Confirmer ou Annuler?
  '  IF sortie&=oksecond&
  '  ' Nous pr‚levons les textes des champs ‚ditables
  '  nom1$=CHAR{{OB_SPEC(adr_form%,nom&)}}
  ' secu1$=CHAR{{OB_SPEC(adr_form%,numsecu&)}}
  secu1$=CHAR{{OB_SPEC(adr_form%,timerent&)}}
  PRINT "*";secu1$;"*"
  ' endif
RETURN
> PROCEDURE gere_info
  LOCAL sortie&,adr_form%
  '
  packer$="?"
  '
  '
  header$=STRING$(4,0)
  unpacked_size$=STRING$(4,0)
  packed_size$=STRING$(4,0)
  unpacked_size%=0
  packed_size%=0
  taille%=0
  '
  OPEN "I",#1,file$                              ! prends la longueur du spl
  '
  taille%=LOF(#1)
  disk_size%=taille%
  '
  IF taille%=0 OR taille%<20
    CLOSE #1
    GOTO taille0
  ENDIF
  '
  BGET #1,V:header$,4
  IF header$="ICE!" OR header$="Ice!" OR header$="AU5!"
    BGET #1,V:packed_size$,4
    BGET #1,V:unpacked_size$,4
    unpacked_size%=CVL(unpacked_size$)
    taille%=unpacked_size%
    IF header$="ICE!"
      packer$="PACK-ICE v2.4"
    ELSE IF header$="Ice!"
      packer$="PACK-ICE v2.12"
    ELSE IF header$="AU5!"
      packer$="AUTOMATION v5"
    ENDIF
  ELSE IF header$="FIRE"
    BGET #1,V:packed_size$,4
    BGET #1,V:unpacked_size$,4
    unpacked_size%=CVL(unpacked_size$)
    taille%=unpacked_size%
    packer$="PACK-FIRE v2.0"
  ELSE IF header$="ATOM"
    BGET #1,V:unpacked_size$,4
    BGET #1,V:packed_size$,4
    unpacked_size%=CVL(unpacked_size$)
    taille%=unpacked_size%
    packer$="ATOMIK CRUNCHER v3.3"
  ELSE IF header$="ATM5"
    BGET #1,V:unpacked_size$,4
    BGET #1,V:packed_size$,4
    unpacked_size%=CVL(unpacked_size$)
    taille%=unpacked_size%
    packer$="ATOMIK CRUNCHER v3.5"
  ENDIF
  CLOSE #1
  '
  packed_size%=CVL(packed_size$)
  '
  '
  header3$=LEFT$(header$,3)
  '
  '     Conserver le mot "Use" (voir suite)
  IF header3$="LSD"
    packer$="Use AUTOMATION PACKER v2.3 or v2.5"
  ELSE IF header3$="LZH"
    packer$="Use JAM PACKER v3 or v4"
  ELSE IF header3$="LZW"
    packer$="Use JAM PACKER v4"
  ELSE IF header3$="JEK"
    packer$="Use JAM PACKER v2.3"
  ENDIF
  '
taille0:
  IF interface!=TRUE
    IF packer$="?"
      IF LEFT$(header$,1)<>"`"
        ~FORM_ALERT(1,"[3][Packer |not recognized...| |("+header$+")][   Ok   ]")
      ELSE
        ~FORM_ALERT(1,"[3][Packer |not recognized... | |(68000 code ?)][   Ok   ]")
      ENDIF
    ELSE
      '
    againw:
      ~WIND_UPDATE(3)       ! Prenons le controle de la situation
      ~RSRC_GADDR(0,info&,adr_form%)   ! Chercher adresse du formulaire
      ~FORM_CENTER(adr_form%,x&,y&,w&,h&) ! le centre
      ~FORM_DIAL(0,0,0,0,0,x&,y&,w&,h&)
      ~FORM_DIAL(1,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
      '
      CHAR{{OB_SPEC(adr_form%,inf1&)}}=packer$
      CHAR{{OB_SPEC(adr_form%,inf2&)}}="data file"
      CHAR{{OB_SPEC(adr_form%,inf3&)}}=STR$(disk_size%)
      CHAR{{OB_SPEC(adr_form%,inf4&)}}=STR$(packed_size%)
      CHAR{{OB_SPEC(adr_form%,inf5&)}}=STR$(unpacked_size%)
      '
      ~OBJC_DRAW(adr_form%,0,10,x&,y&,w&,h&)
      sortie&=FORM_DO(adr_form%,0)
      OB_STATE(adr_form%,sortie&)=BCLR(OB_STATE(adr_form%,sortie&),0)
      ~FORM_DIAL(2,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
      ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&)
      ~WIND_UPDATE(2)       ! rendons le controle de la situation
      ' Sommes nous sortis avec Confirmer ou Annuler?
      '
      '
      IF sortie&=infook&
        '
        IF LEFT$(packer$,3)="Use"
          ~FORM_ALERT(1,"[3][Can't |depack it.][  Sh*t!  ]")
          GOTO againw
        ELSE
          depack_it!=TRUE
        ENDIF
        '
      ENDIF
    ENDIF
    '
    '
  ENDIF
  '
RETURN
> PROCEDURE gere_authorbx
  LOCAL sortie&,adr_form%
  ~WIND_UPDATE(3)       ! Prenons le controle de la situation
  ~RSRC_GADDR(0,author&,adr_form%)   ! Chercher adresse du formulaire
  ~FORM_CENTER(adr_form%,x&,y&,w&,h&) ! le centre
  ~FORM_DIAL(0,0,0,0,0,x&,y&,w&,h&)
  ~FORM_DIAL(1,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~OBJC_DRAW(adr_form%,0,10,x&,y&,w&,h&)
  sortie&=FORM_DO(adr_form%,0)
  OB_STATE(adr_form%,sortie&)=BCLR(OB_STATE(adr_form%,sortie&),0)
  ~FORM_DIAL(2,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&)
  ~WIND_UPDATE(2)       ! rendons le controle de la situation
  ' Sommes nous sortis avec Confirmer ou Annuler?
  '
  '
  '  IF sortie&=okpremie&
  '  IF BTST(OB_STATE(adr_form%,diska&),0)
  '  ~FORM_ALERT(1,alerte2$)   ! Vous avez choisit A
  ' ELSE
  '  ~FORM_ALERT(1,alerte3$)   ! Vous avez choisit B
  ' ENDIF
  ' ENDIF
  '
  '
  '
RETURN
> PROCEDURE gere_autod
  LOCAL sortie&,adr_form%
  ~WIND_UPDATE(3)       ! Prenons le controle de la situation
  ~RSRC_GADDR(0,autod&,adr_form%)   ! Chercher adresse du formulaire
  ~FORM_CENTER(adr_form%,x&,y&,w&,h&) ! le centre
  ~FORM_DIAL(0,0,0,0,0,x&,y&,w&,h&)
  ~FORM_DIAL(1,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~OBJC_DRAW(adr_form%,0,10,x&,y&,w&,h&)
  sortie&=FORM_DO(adr_form%,0)
  OB_STATE(adr_form%,sortie&)=BCLR(OB_STATE(adr_form%,sortie&),0)
  ~FORM_DIAL(2,x&+(w&/2),y&+(h&/2),0,0,x&,y&,w&,h&)
  ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&)
  ~WIND_UPDATE(2)       ! rendons le controle de la situation
  '
  '
RETURN
> PROCEDURE t
  t%=INP(2)
  t$=UPPER$(CHR$(t%))
RETURN
'
> PROCEDURE read_scr_file
  DIM depack_file$(254)
  '
  pos%=0
  OPEN "I",#6,scr_file$
  WHILE EOF(#6)=FALSE
    INPUT #6,l$
    l$=UPPER$(l$)
    IF LEFT$(l$,3)<>"REM"
      IF l$<>""
        '       PRINT l$;"*"
        INC pos%
        depack_file$(pos%)=l$
      ENDIF
    ENDIF
  WEND
  CLOSE #6
RETURN
> PROCEDURE use_scr_files
  interface!=FALSE
  PRINT
  PRINT "=================================="
  PRINT "DEPACK-D      (.SCR 'batch mode') "
  PRINT version$
  PRINT "                                  "
  FOR dummy%=1 TO pos%
    PRINT dummy%;"/";pos%;"  ";depack_file$(dummy%)
    file$=depack_file$(dummy%)
    @gere_info
    IF packer$<>"?"
      GOSUB depack
    ENDIF
    t$=INKEY$
    EXIT IF t$=CHR$(27)
  NEXT dummy%
  PRINT "                                  "
  IF t$=CHR$(27)
    PRINT "Operation aborted"
  ELSE
    PRINT "You should now delete DEPACK_D.SCR"
  ENDIF
  PRINT "=================================="
  REPEAT
    PRINT CHR$(7);
  UNTIL INKEY$<>""
  t
  PRINT
RETURN
