@database "Image tools"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 1.2C
@subject "P2SM tools documentation"


@node "p2smt_start" "P2SM tools: guide"

 @{0U}P2SM tools@{0}

 ú @{"Legal" LINK "p2smt_legal"}
  
 ú @{"About MAKE_MAP" LINK "p2smt_make_map"}

 ú @{"About MAKE_DGI/DGX" LINK "p2smt_generalities"}
 
   - @{"MAKE_DGI" LINK "p2smt_make_dgi"}: convert one image to DGI or VDI format
   - @{"MAKE_DGX" LINK "p2smt_make_dgx"}: several GIFs in a folder to DGI format, and pack them
    
 ú @{"About MAKEFILE" LINK "p2smt_makefile"}
    
 ú @{"History" LINK "p2smt_history"}
 
@endnode

@node "p2smt_legal" "P2SM tools: legal"

 Disclaimer: use it at your own risk. GFA sources are provided for general
             knownledge and possible bugfix.
 
@endnode

@node "p2smt_make_map" "P2SM tools: Make MAP"

 @{0U}Purpose:@{0} slice a GIF image file into tiles and table of tiles IDs.
          Generated tiles will be GIF image files, with same palette and
          bitplane number.
          CRC32 hash algorithm is used to detect identical tiles.
          Transparency is handled, so tiles masks can be also generated.
          Tiles masks will be GIF image files, with black or white color,
          and bitplane number of 1.
          
 This may be convenient for:
   - bulk sprites that parts does not use masks.
   - extra-large map of game level (found on the internet) that need to be
     converted into tiles assets and map.dat
     
 This tool uses GIFdec.ldg for input and GIFenc.ldg for ouput. You must have
 installed these LDG libraries.
 
 @{0U}Input:@{0} any GIF image file. You can drag'n'drop from desk to this tool's window
        or use the classic fileselector.
        
        Make sure you have final color table in this GIF source, or you'll have
        to remap colors for each tiles images.
                
        Width: if 0 then use whole width, can be multiple 16 (see settings).
        Height: if 0 then this use whole height.
        
        GIF Transparency is handled and will be used to generate masks.

 @{0U}Output:@{0} folders and files are created, with lower or uppercase (see settings). 
 
 {filename}.gif -> {filename}.gif
                -> {filename}.map\
                -> {filename}.map\map.inf (text file, descriptions)
                -> {filename}.map\map.dat (the tiles IDs 2D values table)
                -> {filename}.map\tiles.set\ (contains tiles and tiles masks)
 
 Tile file name is tile ID, padded with left 0 to fit for 6 character width,
 with GIF extension. If a mask is generated, then "m" is present between ID
 and extension.

 For a 320*200px GIF image input, tiles IDs fit in Byte area (0 to 255).
 An alert is displayed if the ID overflows 255 and Map Size Values is 1 (Byte).
  
 For larger images input, you can store this in 2 Bytes (Word).
 
 Word and Long storage are proposed in case you may want to store additionnal
 values in higher bytes in map.dat file.
 
@endnode

@node "p2smt_generalities" "P2SM tools: about MAKE_DGI/DGX"

 MAKE_DGI and MAKE_DGX are tools created for my needs in game developments for
 GEM environment.

 To facilitate compatibility to the VDI, MFDB structure (see TOS.HYP doc dev)
 is employed as header. 
 
 Palette may be present or absent, each colors encoded in VDI format
 (1 INT from 0 to 1000 for each component of R, V, B).
  
 The raster images are stored in standard format (planar, not interleaved)
 so that they can be transformed to the specific format of the screen 
 (official Atari, strange graphic cards, new enhanced screenmodes)
 at game start.

 Rasters images are stored always with a width multiple of 16px.
 Bitplanes number is kept (16 colors remains 16c, 256 colors remains 256c, etc).

 The convertors use the PARX.SYS read methods (RIM). GIF modules is mainly
 employed. 

 Generated formats VDI, DGI and DGX are never packed (to reduce loading time,
 generaly loaded from hard disk with space).
 
@endnode

@node "p2smt_make_dgi" "P2SM tools: Make DGI or VDI"

 Usage : scans one image or all GIF of a folder and converts it to DGI or VDI
 format. 
 DGI is the old image format for DGEM. 
 VDI is the format used for Rosemary's Racoon Strip Game.

 Save routines are located in MAKE_DGI.GFA.
 Load routines are located in DGEM.GFA and others.

 ú @{0U}DGI format@{0}

  20 bytes informations for MDFB 
  The first 4 bytes = "_DGI" are supposed to be replaced by a pointer.

  Next bytes -> raster image in VDI standard mode (planar, not interleaved)
 
  Since most graphics share the same palette, it's better to have the palette
  in a separated common file. So no palette datas in DGI files.

 ú @{0U}VDI format@{0}

  20 bytes informations for MDFB (see TOS.HYP doc dev)
  The first 4 bytes = "_VDI" are supposed to be replaced by a pointer.

  Next bytes -> palette: 2*3 or 16*3 or 256*3 INTs (6 or 96 or 1536 bytes)
                         (1 INT for each R, V, B, value from 0 to 1000)

  Next bytes -> raster image in VDI standard mode (planar, not interleaved)

 ú @{0U}for TC images@{0}

  20 bytes informations for MDFB (see TOS.HYP doc dev)
  the first 4 bytes = "_DGI" or "_VDI" are supposed to be replaced by a
  pointer. The bitplanes number is 24.

  Next bytes -> raster image separated in R, then V, then B
                (1 byte for each R or V or B pixel component)
 
@endnode

@node "p2smt_make_dgx" "P2SM tools: Make DGX"

 Usage : scans all GIF (16 or 256 colors) images of a folder, converts it to
 DGI format and gathers all them into a containor DGX file which name is
 [name of the folder].DGX, generated besides the folder.

 Does not handle TC images. Handles only GIF.

 This util was written to group numerous images, to avoid files allocation
 table overloads on disks. It's convenient to group into family sprites, such
 as animations, or depending on the nature of elements.

 Save routines are located in MAKE_DGX.GFA.
 Load routines are located in DGEM.GFA and others.

 1 LONG : "_DGX"
 1 INT : number of contained DGI "files" 
 then list of...
 8 CHAR : was the name without extension of the DGI file, uppercase is used.
 1 LONG : offset from start, to the DGI structure
 then list of DGI structures...

 @{0U}Remap with the EXTENDED.P08@{0}

 Remap colors to the extented 256 colors palette is a trick used for DGEM, it
 does not keep the 16 colors (4 bitplanes), but uses the EXTENDED.P08 file
 (256 colors) to convert and color-remap a 16c to 256c images.
  
 This trick help me to manage additionnal colors used in Dungeon Master for
 several monsters.
  
 This file is editable with D2M or P2SM (palette tools).
 
@endnode

@node "p2smt_makefile" "P2SM tools: about MAKEFILE"

 Converts a datalist human readable and editable text file into a binary
 datas list (list of structures) more convenient for programs to handle.
 
 Need RAM 1 MB at least, source text is limited to 10K lines maximum (can
 be modified by editing the GFA source and recompile it).

 Usage: copy MAKEFILE.PRG into you project, drag'n'drop the text file to
        the MAKEFILE.PRG icon (ARGV). If not, a fileselector is displayed to
        choose the source text file.
 
 See the example.txt provided, it's more comprehensible than to read this doc.
 
 The header/start of the text has directives, starting with @ character.
 Comments starts with # character. No empty lines. Lines ends with CR+LF 
 characters. All fields are in the same line.
 
 @FILENAME= for path and full name of the target binary file.
 @SEPARATOR= for the character separator of the fields/columns, 
             usually a comma but can be else like a pipe.
 
 @COLUMNn= types and number of columns, with n from 1 to N (N < 80 maximum).
 
          INT for bigendian signed 16 bits integer
          LONG for bigendian signed 32 bits integer
          CHAR(X) for nullbyte terminated C-string, with X is maximum length
                      (ending nullbyte included). An alert is displayed if
                      an overflow is detected.
 
          Feel free to add more types if need, by modifying the GFA source.
 
 Program ends with an alert displaying the number of written records in
 the target file.
 
@endnode

@node "p2smt_history" "P2SM tools: history"

 @{0B}20250611@{0}
  - add: MAKE_MAP tool to slice bulk sprites or large maps into tiles and table.
  - fix: MAKE_DGI/DGX: default unset work folder pointed to unexisting folder.

 @{0B}20250518@{0}
  - add: MAKEFILE tool from my games projects.

 @{0B}1.2C@{0}
  - fix: under monoTOS, images and parx RIM modules were not found,
         due to bad test on file attributes during Fsfirst/Fsnext.

 @{0B}1.2B@{0}
  - add: make update desk for drives contents after writing on disk 
         (under multitasking environment).
  - fix: spare character (often "\") at end path if drag'n'drop.

 @{0B}1.2@{0}
  - fix: parx.mem use is removed.
  - fix: parx.sys functions from P2SM code.
  - add: trace to u:\ram\make_dg?.log (MiNT only).
  - fix: MAKE_DGI: export in TC24 mode was missing.
  - fix: MAKE_DGX: remap with extended did not expand bitplane number to 8.
  - chg: menu removed, Quit = close main window.
  - chg: settings in $HOME and shared between the 2 MAKE_*.
  - add: settings: use or not lowercase for extensions (.vdi, .dgi, .dgx). 
  - add: tools.hyp file guide, with fixes in the documentation.

 @{0B}1.1@{0}
  - reworked from individual dev tools.
  - MagiC/MiNT compatibilty with enhanced directory functions. 
 
@endnode
