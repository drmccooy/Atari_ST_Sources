@database "GIFDEC,GIFENC"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 2
@subject "gifdec.ldg & gifenc.ldg documentation"

@node "gifdec_start" "gifdec.ldg & gidenc.ldg: guide"

 LDG ports from the GIFLib Project (5.2.2)
  
 These LDG are public domain.

 @{"What is it?" LINK "gifdec_presentation"}
 @{"Install" LINK "gifdec_install"}
 @{"History" LINK "gifdec_history"}
     
 Decoder: @{"Usage" LINK "gifdec_usage"} and @{"Functions" LINK "gifdec_functions"}
  
 Encoder: @{"Usage" LINK "gifenc_usage"} and @{"Functions" LINK "gifenc_functions"}
 
@endnode

@node "gifdec_presentation" "gifdec.ldg & gidenc.ldg: presentation"
   
 Stands for GIF image format decoder (loading) and encoder (saving).
    
 Main purpose is to produce raw chunky datas, used directly by PS2M drawing
 application (and future tools), or other programs/games without having
 to convert TC24 bits images into lower TC15/16 bits or 256 colors.
 In the client application double conversion (c2p + p2c) can be thus avoided,
 so loading and saving are quickened.
  
 Others purposes are:
 - optimisation accordingly to the CPU, with 68K, 020-060, ColdFire versions.
 - overcomes an issue in GIF680x0.RIM Parx M&E module on extra-wide images
   (glitches after the 2048 pixels width).
 - handles GIF89a version, with transparency and animation.
 - does not access disk, work only with memory buffers.
   
@endnode

@node "gifdec_install" "gifdec.ldg & gidenc.ldg: install et needs"

 Both libraries should be installed. 

 @{0U}Needs:@{0}

 - a large amount of memory, 512 KB may be not enough
 - FreeMiNT is advised

 @{0U}Update:@{0}

 > Replace old GIFDEC.LDG and GIFENC.LDG by the new ones.
    
 @{0U}Installation:@{0}

 > Install the LDG system:
   - LDG.PRG in your AUTO folder is needed by some programs (GFA coded)
   which detect and use ldg functions via the LDGM cookie.
   - set the LDG folder (usualy C:\GEMSYS\LDG\) by launching LDG.CPX in
   the Control Panel.
    
 > Put GIFDEC.LDG and GIFENC.LDG in the LDG folder.
        
 > No need to restart, the LDG libraries are loaded dynamicaly.
   Some programs need the LDGM cookie, you can launch LDG.PRG after
   boot sequence.
 
@endnode

@node "gifdec_history" "gifdec.ldg & gifenc.ldg: history"

 @{0B}Release 2:@{0}
  - fix: crashes under MagiC (use libshare.a)

 @{0B}Release 1:@{0}
  + new release, based on 5.2.2 GIFLib Project
 
@endnode

@node "gifdec_usage" "gifdec.ldg: usage"

 - If you use VDI calls for your bitmaps, don't forget to convert colors from
   "Shifter" to VDI indexes, in the color table AND the raw chunky raster.

 - the caller program must load itself the entire GIF file into a memory buffer
   (preferentially in Global and TT-RAM).

 - call gifdec_open() to open the GIF file from memory, with data address start
   and file size of the GIF file, returns a pointer to a current GIFFileType
   object.
 - call gifdec_read() to decode the datas.
 - call the several gifdec_get_*() functions to retreive the informations.
 - at the end, always call gifdec_close() to cleanly free all internal
   memory allocations. The GIFFileType descriptor will be lost and all
   reference to it must avoided.
 
 - don't forget to free your the memory buffer where the GIF file was loaded.
 
@endnode

@node "gifdec_functions" "gifdec.ldg: functions"

 Built with gcc, so "int" are usually int32_t (signed 32 bits).

  
 @{0U}--- General functions@{0}

 /* 
   tells the library about the RAM buffer containing the whole loaded GIF file.
   returns pointer to a GIFFileType object, used for other functions calls.
   returns NULL if problem.
  */
 @{0B}GifFileType* gifdec_open@{0}(
       uint8_t *data, // start pointer of the RAM buffer
       const int size // size of the GIF file
       );
 
 /* 
   returns 1 if the GIF correctly decoded, 0 if error.
   if error, you may call gifdec_get_last_error() to log it.
  */
 @{0B}int32_t gifdec_read(GifFileType *gif);@{0}

 /* 
   returns 1 if OK, 0 if error.
   the GIFFileType is freed and discarded so any reference must be discarded.
 */
 @{0B}int32_t gifdec_close(GifFileType *gif);@{0}

 /*
   returns C-String pointer to human readable last error.
   must be used after gifdec_open() and before gifdec_close().
 */
 @{0B}const char* gifdec_get_last_error(GifFileType *gif);@{0}

  
 @{0U}--- Whole canvas@{0}
 
 /* returns width of the canvas */
 @{0B}int32_t gifdec_get_width(GifFileType *gif);@{0}

 /* returns height of the canvas */
 @{0B}int32_t gifdec_get_height(GifFileType *gif);@{0}
 
 /* returns the background color index */
 @{0B}int32_t gifdec_get_bckgrnd_index(GifFileType *gif);@{0}

 /* 
   returns the number of stored frames
   -> 1 for static image
   -> N for animated GIF (always GIF89a version)
    
   frames index "idx" parameter starts from 0 to N-1  
  */
 @{0B}int32_t gifdec_get_images_count(GifFileType *gif);@{0}

  
 @{0U}--- Local frames@{0}

 /* returns the x coordinate of the frame in the canvas */
 @{0B}int32_t gifdec_get_image_top(GifFileType *gif, int idx);@{0}
 
 /* returns the y coordinate of the frame in the canvas */
 @{0B}int32_t gifdec_get_image_left(GifFileType *gif, int idx);@{0}
 
 /* 
   returns the width of the frame in the canvas.
   carefull to minimize width accordlingly to x-frame and canvas-width.
 */
 @{0B}int32_t gifdec_get_image_width(GifFileType *gif, int idx);@{0}
 
 /* 
   returns the height of the frame in the canvas.
   carefull to minimize width accordlingly to y-frame and canvas-height.
 */
 @{0B}int32_t gifdec_get_image_height(GifFileType *gif, int idx);@{0}
 
 /* 
   returns N = number of colors in the colors table.
   colors indexes start from 0 to N-1.
   set the bitplane number of your raster accordingly.
   if the Local Color Table is missing, then the Global Color Table is used. 
 */
 @{0B}int32_t gifdec_get_colors_count(GifFileType *gif, int idx);@{0}
 
 /* 
   returns a pointer to a N*3 Bytes buffer (768 Bytes max <- 256*3). 
   this is a suite of 1 Byte for red, 1 Byte for green, 1 Byte for blue.
   you should read it accordingly to the colors number.
   if the Local Color Table is missing, then the Global Color Table is used. 
  */
 @{0B}uint8_t* gifdec_get_colors_table(GifFileType *gif, int idx);@{0}

 /* 
   returns a pointer to a frame-width*frame-height Bytes buffer,
   populated wif colors indexes (chunky raw format),
   that is to be paste roughly on the canvas if GIF87a format,
   or accordingly to the disposal value if GIF89a format.
  */
 @{0B}uint8_t* gifdec_get_chunky_raster(GifFileType *gif, int idx);@{0}

  
 @{0U}--- GIF89a Graphics Control Extensions@{0}

 /* retursn the disposal method */
 @{0B}int32_t gifdec_get_image_disposal(GifFileType* gif, int idx);@{0}
 
 /* return the transparent color index) */
 @{0B}int32_t gifdec_get_trnsprnt_index(GifFileType* gif, int idx);@{0}
 
 /* returns the delay before next frame, values from 0 to 0xFFFF, 1 = 0.01s */
 @{0B}int32_t gifdec_get_image_delay(GifFileType* gif, int idx);@{0}

  
 @{0U}--- Miscellaneous@{0}

 /* returns C-String pointer to the library version */
 @{0B}const char* gifdec_get_lib_version();@{0}

 /* returns C-String pointer to the GIF file version ("GIF87a" or "GIF89a") */
 @{0B}const char* gifdec_get_gif_version(GifFileType *gif);@{0}
 
@endnode

@node "gifenc_usage" "gifenc.ldg: usage"
     
 - If you use VDI calls for your bitmaps, don't forget to convert colors from
   VDI to "Shifter" indexes, in the color table AND the raw chunky raster.
  
 - call gifenc_open() to open the buffers with general parameters, 
   this returns a pointer to a current GIFFileType object.
 - if animation, set the loop number.
 - call gifenc_add_frame() for every frame (1 for one image or N for animation).
 - if animation or just one transparent frame, call gifenc_set_special().
 - at the end, call gifenc_write() to generate the file in memory.
 - use get_filedata() and get_filesize() to know the buffer pointer and size.
 - if the file on disk already exists, it should be deleted first or renamed.
 - call your own files functions to create file and write the datas on disk.
 - call gifenc_close() to free the internal memory allocations.
 
 NB: The GIFLib generate GIF89a version if animation or transparency, 
     otherwise it's GIF87a for compatibility.
 
@endnode

@node "gifenc_functions" "gidenc.ldg: functions"

 Built with gcc, so "int" are usually int32_t (signed 32 bits).
 
 
 @{0U}--- General functions@{0}

 /* 
   create the GIF in RAM, with general parameters, eventually with a Global
   Color Table.
   returns pointer to a GIFFileType object, used for other functions calls.
   returns NULL if problem.
  */
 @{0B}GifFileType* gifenc_open@{0}(
        int width,             // width of the canvas
        int height,            // height of the canvas
        int bckgrnd,           // background color index
        int colors,            // if Global Color Table then the colors count
                               //   that must be (1 << bitplane number) 
                               //   if not then 0
        const uint8_t *palette // if GCT then suite of colors
                               //   1 Byte red, 1 Byte green, 1 Byte blue
                               //   1 Byte red, 1 Byte green, 1 Byte blue...
                               //   N is colors count -> its size is N*3 Bytes
        );

 /* 
   adds a frame to the canvas, eventually with a Local Color Table
   returns 1 for OK, 0 for ERROR
  */
 @{0B}int32_t CDECL gifenc_add_image@{0}(
        GifFileType *gif,       // representation of the GIF object
        int left,               // X coordinate of the frame in the canvas
        int top,                // Y coordinate of the frame in the canvas
        int width,              // width of the frame
        int height,             // height of the frame
        int colors,             // if Local Color Table then the colors count
                                //   that must be (1 << bitplane number) 
                                //   if not then 0
        const uint8_t *palette, // if LCT then suite of colors
                                //   1 Byte red, 1 Byte green, 1 Byte blue
                                //   1 Byte red, 1 Byte green, 1 Byte blue...
                                //   N is colors count -> its size is N*3 Bytes
        const uint8_t *chunky   // suite of width*height Bytes, representing
                                     the frame datas in chunky raster 
                                     (= suite of colors indexes)
        );

 /* 
   write all datas in internal memory buffer
   returns 1 for OK, 0 for ERROR
   if ERROR, then call for the get_last_error()
 */
 @{0B}int32_t CDECL gifenc_write(GifFileType *gif);@{0}

 /* returns the data pointer for the datas to be saved in the GIF file */
 @{0B}uint8_t* CDECL gifenc_get_filedata();@{0}

 /* returns the final size of datas to be saved in the GIF file */
 @{0B}uint32_t CDECL gifenc_get_filesize();@{0}

 /* must be called to free internal memory allocations, always returns 1 */
 @{0B}int32_t CDECL gifenc_close(GifFileType *gif);@{0}

 /*
   returns C-String pointer to human readable last error.
   must be used after gifdec_open() and before gifdec_close().
 */
 @{0B}const char* gifenc_get_last_error(GifFileType *gif);@{0}


 @{0U}--- GIF89a Graphics Control Extensions@{0}

 /*
   sets the number of loops for animation (0 for infinite)
   must be called after opening and before adding any frame
   returns 1 for OK, 0 for ERROR
 */
 @{0B}int32_t CDECL gifenc_set_loops(GifFileType *gif, int loops);@{0}

 /* 
   sets some GIF89a extensions.
   can be called after adding all frames, use the frame index.
   returns 1 for OK, 0 for ERROR
 */
 @{0B}int32_t CDECL gifenc_set_special@{0}(
            GifFileType *gif, // representation of the GIF object
            int frame_idx,    // frame index
            int trnsprnt,     // transparent color index (use -1 if disabled)
            int disposal,     // disposal method (see GIF89a documentation)
            int delay         // delay before next frame (1 = 0.01s)
            );


 @{0U}--- Miscellaneous@{0}

 /* returns C-String pointer to the library version */
 @{0B}const char* gifenc_get_lib_version();@{0}
 
@endnode
