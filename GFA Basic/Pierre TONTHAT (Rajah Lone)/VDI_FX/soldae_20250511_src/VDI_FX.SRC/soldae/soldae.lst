$M 256000 $S> $F< $P< $%0 $*% $O3 $A2 $E$
'
REM #KEY ColdFire v4e|Classic 68K
REM #IFK 0
REM #BRK MA
REM #EIK 1 ! ColdFire v4e
REM #LIB ColdFire
REM #EXT prx
REM #EIK 2 ! Classic 68K
REM #LIB 68000
REM #EXT prg
REM #FIK
'
IF FATAL
  ~FORM_ALERT(1,"[1][ This version is not suited | for this CPU. Please get | the correct archive. ][ Ok ]")
  @leave
ENDIF
IF ERR=8
  ~FORM_ALERT(1,"[1][ Insuffisant or fragmented | memory ][ Ok ]")
  @leave
ELSE
  init1
  init2
  main
ENDIF
'
> PROCEDURE leave
  IF offscreen_enabled!
    V~H=off_handle&
    ~V_CLSBM()
    V~H=-1
  ENDIF
  '
  @rnd_exit
  @restore_colors
  @close_win
  @gxalloc_main_exit(1)
  @mxfree(palette_save%)
  @mxfree(palette_work%)
  FOR i&=1 TO img_nb_slots&
    IF LONG{img_mfdb%(i&)}>0
      @mxfree(LONG{img_mfdb%(i&)})
    ENDIF
  NEXT i&
  @mxfree(mfdb_structure%)
  IF ressource!
    ~MENU_BAR(ressource_menu%,0)
    ~RSRC_FREE()
  ENDIF
  QUIT
RETURN
'
> PROCEDURE init1
  '
  IF A~I<0 ! appl_init() failed?
    @leave
  ENDIF
  '
  IF _B<8
    ~FORM_ALERT(1,"[1][ Need at least 256 colors ][ Quit ]")
    @leave
  ENDIF
  '
  mx_mask%=@mx_mask
  mxalloc!=(_GEMDOS>=&H19)
  '
  magic!=GETCOOKIE(CVL("MagX"))
  mint!=(_MINT<>0) ! GETCOOKIE(CVL("MiNT"))
  '
  IF magic! OR mint!
    naes!=TRUE
  ELSE IF _AES>=&H399
    naes!=TRUE
  ELSE
    naes!=FALSE
  ENDIF
  '
  multi!=MULTITASK?
  '
  @gxalloc_main_init(1)
  '
  @declare
  @declare_effect
  IF mint!=FALSE
    RESERVE 32000
  ENDIF
  @allocate
  '
  ~RSRC_FREE()
  IF EXIST(ressource_file$)
    IF RSRC_LOAD(ressource_file$)<>0
      ~RSRC_GADDR(0,0,ressource_menu%)
      ressource!=TRUE
    ENDIF
  ENDIF
  '
RETURN
> PROCEDURE declare
  '
  general_path$=CURDIR$
  '
  application_path$=general_path$+"SOLDAE.DAT\"
  '
  ressource_file$=application_path$+"SOLDAE.RSC"
  ressource!=FALSE
  ressource_menu%=0
  '
  preferences_file$=general_path$+"SOLDAE.INF"
  '
  DIM boolean$(2)
  boolean$(0)="FALSE"
  boolean$(1)="TRUE"
  '
  hand_win&=0
  xd&=0
  yd&=0
  wd&=0
  hd&=0
  wx&=_DX
  wy&=_DY
  wl&=_DW
  wh&=_DH
  win!=FALSE
  aff!=FALSE
  '
  bitplane_number&=_B
  '
  pixel_width_micron&=WORK_OUT(3)
  pixel_height_micron&=WORK_OUT(4)
  '
  moves_nb_slots&=10
  DIM moves_adr%(moves_nb_slots&),moves_total&(moves_nb_slots&)
  '
  moves_max_n&=6
  '
  ' number of slots for images pool
  img_nb_slots&=1024
  '
  ' MFDB and coord of the images
  DIM img_mfdb%(img_nb_slots&)
  DIM img_x&(img_nb_slots&),img_y&(img_nb_slots&)
  DIM img_w&(img_nb_slots&),img_h&(img_nb_slots&)
  '
  ' pointer to loaded DGX file (group of DGI) or DGI file if not existing
  dgx_adr%=0
  dgx_buffer_len%=100000
  old_dgx_filename$=""
  '
  ' pixel<->palette index in 16 and 256 color mode
  DIM pixorg_col|(256)
  '
  ' bit organization for true color mode
  DIM bitorg_r|(16),bitorg_g|(16),bitorg_b|(16)
  ' number of red, green, blue for a pixel
  nb_bit_r|=0
  nb_bit_g|=0
  nb_bit_b|=0
  '
  ' 32bit value for palette mode to TC mode transformation
  DIM color(255)
  '
  ' transcodage table for pixel value<->color of the palette
  DIM trans_pal|(255)
  trans_pal|(0)=0
  trans_pal|(1)=2
  trans_pal|(2)=3
  trans_pal|(3)=6
  trans_pal|(4)=4
  trans_pal|(5)=7
  trans_pal|(6)=5
  trans_pal|(7)=8
  trans_pal|(8)=9
  trans_pal|(9)=10
  trans_pal|(10)=11
  trans_pal|(11)=14
  trans_pal|(12)=12
  trans_pal|(13)=15
  trans_pal|(14)=13
  trans_pal|(15)=255
  FOR i&=16 TO 254
    trans_pal|(i&)=i&
  NEXT i&
  trans_pal|(255)=1
  '
  @boss_declare
  '
RETURN
> PROCEDURE allocate
  '
  palette_save%=@mxalloc(1536,3)
  palette_work%=@mxalloc(1536,3)
  '
  ' pxy array and MFDB strutures
  mfdb_structure%=@mxalloc(SHL(SHR(ADD(MUL(20,SUCC(img_nb_slots&)),31),4),4),3)
  IF mfdb_structure%>0
    FOR i&=0 TO img_nb_slots&
      img_mfdb%(i&)=ADD(ADD(mfdb_structure%,16),MUL(i&,20))
      '
      LONG{img_mfdb%(i&)}=0
      LONG{ADD(img_mfdb%(i&),4)}=0
      LONG{ADD(img_mfdb%(i&),8)}=0
      LONG{ADD(img_mfdb%(i&),12)}=0
      LONG{ADD(img_mfdb%(i&),16)}=0
    NEXT i&
  ELSE
    leave
  ENDIF
  '
  scr_mfdb%=img_mfdb%(0)
  off_mfdb%=img_mfdb%(1)
  '
  ~VQ_EXTND(1)
  '
  bitplane_number&=INTOUT(4)
  scale_view!=BTST(INTOUT(30),0)
  '
  ' screen structure
  IF GETCOOKIE(CVL("EdDI"))
    '
    DIM work_out&(272)
    '
    ~VQ_SCRNINFO(V:work_out&(0))
    '
    workstation_format&=work_out&(0)
    '
    bitplane_number&=work_out&(2)
    IF bitplane_number&=15
      bitplane_number&=16
      mode_32k!=TRUE
    ELSE
      mode_32k!=FALSE
    ENDIF
    '
    SELECT work_out&(1) ! clut_mode&
    CASE 1 ! palette mode: get pixel index<->palette color
      FOR i&=16 TO 271
        pixorg_col|(SUB(i&,16))=BYTE(work_out&(i&))
      NEXT i&
    CASE 2 ! true color mode: get RGB structure for the pixel
      nb_bit_r|=BYTE(work_out&(8))
      nb_bit_g|=BYTE(work_out&(9))
      nb_bit_b|=BYTE(work_out&(10))
      FOR i&=1 TO nb_bit_r|
        bitorg_r|(i&)=BYTE(SUB(bitplane_number&,work_out&(ADD(15,i&))))
      NEXT i&
      FOR i&=1 TO nb_bit_g|
        bitorg_g|(i&)=BYTE(SUB(bitplane_number&,work_out&(ADD(31,i&))))
      NEXT i&
      FOR i&=1 TO nb_bit_b|
        bitorg_b|(i&)=BYTE(SUB(bitplane_number&,work_out&(ADD(47,i&))))
      NEXT i&
    ENDSELECT
  ENDIF
  '
  IF bitplane_number&=8
    raster_mask_mode&=2
    raster_mask_color_0&=0
    raster_mask_color_1&=1
    '
    raster_sprite_mode&=7
  ELSE
    raster_mask_mode&=2
    raster_mask_color_0&=0
    raster_mask_color_1&=1
    '
    raster_sprite_mode&=1
  ENDIF
  '
RETURN
> PROCEDURE init2
  mouse_free
  '
  ~VSF_INTERIOR(1)
  ~VSF_STYLE(0)
  ~VSF_COLOR(1)
  ~VSF_PERIMETER(0)
  '
  IF ressource!
    ~MENU_IENABLE(ressource_menu%,3,0)
    ~MENU_BAR(ressource_menu%,1)
  ENDIF
  IF multi!=FALSE
    ~FORM_DIAL(3,0,0,0,0,_DX,_DY,_DW,_DH)
  ENDIF
  '
RETURN
'
> PROCEDURE declare_effect
  LOCAL pref_len%
  '
  IF EXIST(preferences_file$)
    '
    mem_pos%=0
    '
    file_handle&=FOPEN(preferences_file$,0)
    IF file_handle&>0
      '
      pref_len%=FSEEK(0,file_handle&,2)
      ~FSEEK(0,file_handle&,0)
      '
      IF pref_len%>0
        mem_pos%=@mem_init(pref_len%)
        '
        IF mem_pos%>0
          IF FREAD(file_handle&,pref_len%,mem_pos%)<>pref_len%
            mem_pos%=@mem_close
          ENDIF
        ENDIF
      ENDIF
      ~FCLOSE(file_handle&)
    ENDIF
    '
    IF mem_pos%>0
      '
      mem_start_ptr%=mem_pos%
      mem_end_ptr%=ADD(mem_pos%,pref_len%)
      DO
        IF BYTE{mem_start_ptr%}=13 OR BYTE{mem_start_ptr%}=10
          BYTE{mem_start_ptr%}=0
        ENDIF
        INC mem_start_ptr%
      LOOP UNTIL mem_start_ptr%>mem_end_ptr%
      mem_start_ptr%=mem_pos%
      '
      soldae_delay&=MAX(0,MIN(VAL(@mem_find$("SOL_DAE_ROKKER_DELAY")),200))
      soldae_width&=MAX(304,MIN(VAL(@mem_find$("SOL_DAE_ROKKER_WIDTH")),1024))
      '
      soldae_with_clouds!=@mem_get_flag("SOL_DAE_ROKKER_WITH_CLOUDS",TRUE)
      '
      soldae_with_tower!=@mem_get_flag("SOL_DAE_ROKKER_WITH_TOWER",TRUE)
      '
      soldae_with_danmaku_attacks&=MAX(0,MIN(VAL(@mem_find$("SOL_DAE_ROKKER_WITH_DANMAKU")),30))
      soldae_with_shoop_attacks&=MAX(0,MIN(VAL(@mem_find$("SOL_DAE_ROKKER_WITH_SHOOP_DA_WHOOP")),30))
      soldae_with_spirit_attacks&=MAX(0,MIN(VAL(@mem_find$("SOL_DAE_ROKKER_WITH_WOLF_SPIRIT")),30))
      '
    ENDIF
    '
    ~@mem_close
    '
  ELSE
    '
    soldae_delay&=1
    soldae_width&=304
    soldae_with_clouds!=TRUE
    soldae_with_tower!=TRUE
    soldae_with_danmaku_attacks&=5
    soldae_with_shoop_attacks&=5
    soldae_with_spirit_attacks&=5
    '
  ENDIF
RETURN
'
> FUNCTION mem_init(mem_wished_len%)
  $F%
  ~@mem_close
  mem_len%=MAX(16000,SHL(SHR(ADD(mem_wished_len%,31),4),4))
  mem_start_adr%=@mxalloc(mem_len%,3)
  IF mem_start_adr%<0
    ' alert ?
    mem_start_adr%=0
  ENDIF
  RETURN mem_start_adr%
ENDFUNC
> FUNCTION mem_close
  $F%
  IF mem_start_adr%>0
    @mxfree(mem_start_adr%)
    mem_start_adr%=0
    mem_len%=0
  ENDIF
  RETURN 0
ENDFUNC
> FUNCTION mem_find$(mem_key$)
  LOCAL mem_find_line$,mem_find_ptr%
  IF mem_start_ptr%>0 AND mem_end_ptr%>mem_start_ptr%
    mem_find_ptr%=mem_start_ptr%
    DO
      mem_find_line$=CHAR{mem_find_ptr%}
      ADD mem_find_ptr%,SUCC(LEN(mem_find_line$))
      '
      IF INSTR(mem_find_line$,mem_key$+"=")=1
        mem_str$=MID$(mem_find_line$,ADD(LEN(mem_key$),2))
        mem_pos&=INSTR(mem_str$,"#")
        IF mem_pos&>0
          RETURN TRIM$(LEFT$(mem_str$,PRED(mem_pos&)))
        ENDIF
        RETURN TRIM$(mem_str$)
      ENDIF
      '
    LOOP UNTIL mem_find_ptr%>=mem_end_ptr%
  ENDIF
  RETURN ""
ENDFUNC
> FUNCTION mem_get_flag(find_str$,default_flag!)
  $F%
  '
  IF @mem_find$(find_str$)=boolean$(ABS(NOT default_flag!))
    RETURN NOT default_flag!
  ELSE
    RETURN default_flag!
  ENDIF
ENDFUNC
'
> PROCEDURE load_images
  LOCAL catalog_filename$,catalog_adr%,catalog_ptr%,catalog_handle&,catalog_len%,catalog_load!
  '
  IF EXIST(application_path$+"TOWER.DGX")=FALSE
    ~FORM_ALERT(1,"[1][ Need SOLDAE.DAT\*.DGX files ][ Quit ]")
    @leave
  ENDIF
  '
  ~@gxalloc_init(1)
  '
  catalog_filename$=application_path$+"SPRITES.IDX"
  '
  ~FRE(0)
  '
  catalog_handle&=FOPEN(catalog_filename$,0)
  IF catalog_handle&>0
    '
    mouse_busy
    '
    catalog_len%=FSEEK(0,catalog_handle&,2)
    ~FSEEK(0,catalog_handle&,0)
    '
    catalog_adr%=@mxalloc(ADD(catalog_len%,16),3)
    IF catalog_adr%>0
      IF FREAD(catalog_handle&,catalog_len%,catalog_adr%)=catalog_len%
        '
        DIV catalog_len%,56
        DEC catalog_len%
        '
        catalog_ptr%=catalog_adr%
        catalog_i&=0
        DO
          img_id&=INT{catalog_ptr%}
          '
          catalog_load!=TRUE
          '
          IF soldae_with_clouds!=FALSE
            IF img_id&>46 AND img_id&<59
              catalog_load!=FALSE
            ENDIF
          ENDIF
          IF soldae_with_tower!=FALSE
            IF img_id&>39 AND img_id&<46
              catalog_load!=FALSE
            ENDIF
            IF img_id&>398 AND img_id&<415
              catalog_load!=FALSE
            ENDIF
          ENDIF
          IF soldae_with_danmaku_attacks&=0
            IF img_id&>68 AND img_id&<259
              catalog_load!=FALSE
            ENDIF
          ENDIF
          IF soldae_with_shoop_attacks&=0
            IF img_id&>258 AND img_id&<415
              catalog_load!=FALSE
            ENDIF
          ENDIF
          IF soldae_with_spirit_attacks&=0
            IF img_id&>414 AND img_id&<1010
              catalog_load!=FALSE
            ENDIF
          ENDIF
          '
          IF img_id&>0 AND img_id&<SUCC(img_nb_slots&) AND catalog_load!=TRUE
            '
            img_x&(img_id&)=INT{ADD(catalog_ptr%,2)}
            img_y&(img_id&)=INT{ADD(catalog_ptr%,4)}
            img_w&(img_id&)=INT{ADD(catalog_ptr%,6)}
            img_h&(img_id&)=INT{ADD(catalog_ptr%,8)}
            '
            img_x&(9)=MAX(img_x&(9),img_x&(img_id&))
            img_y&(9)=MAX(img_y&(9),img_y&(img_id&))
            img_w&(9)=MAX(img_w&(9),img_w&(img_id&))
            img_h&(9)=MAX(img_h&(9),img_h&(img_id&))
            '
            img_mask!=(INT{ADD(catalog_ptr%,10)}=1)
            '
            img_name$=CHAR{ADD(catalog_ptr%,12)}
            '
            IF LEFT$(img_name$)="@"
              BMOVE img_mfdb%(VAL(MID$(img_name$,2))),img_mfdb%(img_id&),20
            ELSE IF LEN(img_name$)>0
              ~@load_image(img_id&,img_name$,img_mask!)
            ENDIF
          ENDIF
          '
          ADD catalog_ptr%,56
          INC catalog_i&
        LOOP UNTIL catalog_i&>catalog_len%
        '
        @gxalloc_shrink(1,1024)
        '
      ELSE
        leave
      ENDIF
      @mxfree(catalog_adr%)
    ELSE
      leave
    ENDIF
    ~FCLOSE(catalog_handle&)
    '
    mouse_free
  ELSE
    ~FORM_ALERT(1,"[1][ Could not load SOLDAE.DAT\SPRITES.IDX file ][ Quit ]")
    leave
  ENDIF
  '
  @mxfree(dgx_adr%)
  dgx_adr%=0
  dgx_filename_old$=""
  '
RETURN
> FUNCTION load_image(pimg_id&,pimg_name$,pimg_mask!)
  $F%
  LOCAL file_adr%,mfdb_adr%,dummy_adr%,dummy_size%
  ~FRE(0)
  '
  good!=FALSE
  '
  pimg_name$=application_path$+pimg_name$+".DGI"
  '
  file_adr%=@load_dgx(pimg_name$)
  IF file_adr%>0
    IF (INT{ADD(file_adr%,12)}=8 OR INT{ADD(file_adr%,12)}=1) AND MKL$(LONG{file_adr%})="_DGI"
      LONG{file_adr%}=ADD(file_adr%,20)
      '
      IF pimg_mask!
        '
        dummy_size%=MUL(MUL(INT{ADD(file_adr%,6)},INT{ADD(file_adr%,8)}),2)
        '
        mfdb_adr%=img_mfdb%(pimg_id&)
        LONG{mfdb_adr%}=@gxalloc(1,ADD(dummy_size%,16))
        INT{ADD(mfdb_adr%,4)}=INT{ADD(file_adr%,4)}
        INT{ADD(mfdb_adr%,6)}=INT{ADD(file_adr%,6)}
        INT{ADD(mfdb_adr%,8)}=INT{ADD(file_adr%,8)}
        INT{ADD(mfdb_adr%,10)}=0
        INT{ADD(mfdb_adr%,12)}=1
        INT{ADD(mfdb_adr%,14)}=0
        INT{ADD(mfdb_adr%,16)}=0
        INT{ADD(mfdb_adr%,18)}=0
        '
        BMOVE ADD(file_adr%,20),LONG{mfdb_adr%},dummy_size%
        good!=TRUE
        '
      ELSE
        '
        mfdb_adr%=img_mfdb%(pimg_id&)
        LONG{mfdb_adr%}=@gxalloc(1,ADD(MUL(MUL(INT{ADD(file_adr%,6)},INT{ADD(file_adr%,8)}),SHL&(bitplane_number&,1)),16))
        INT{ADD(mfdb_adr%,4)}=INT{ADD(file_adr%,4)}
        INT{ADD(mfdb_adr%,6)}=INT{ADD(file_adr%,6)}
        INT{ADD(mfdb_adr%,8)}=INT{ADD(file_adr%,8)}
        INT{ADD(mfdb_adr%,10)}=0
        IF mode_32k!
          INT{ADD(mfdb_adr%,12)}=15
        ELSE
          INT{ADD(mfdb_adr%,12)}=bitplane_number&
        ENDIF
        INT{ADD(mfdb_adr%,14)}=0
        INT{ADD(mfdb_adr%,16)}=0
        INT{ADD(mfdb_adr%,18)}=0
        '
        SELECT bitplane_number&
        CASE 8
          ~VR_TRNFM(file_adr%,mfdb_adr%)
          good!=TRUE
        CASE 15,16
          dummy_size%=SHL&(MUL(INT{ADD(file_adr%,6)},INT{ADD(file_adr%,8)}),1)
          ADD file_adr%,20
          dummy_cale%=SUB(ADD(file_adr%,dummy_size%),2)
          ktrans%=LONG{mfdb_adr%}
          FOR itrans%=file_adr% TO dummy_cale% STEP 2
            '
            trns_0&=INT{itrans%}
            trns_1&=INT{ADD(itrans%,dummy_size%)}
            trns_2&=INT{ADD(itrans%,MUL(dummy_size%,2))}
            trns_3&=INT{ADD(itrans%,MUL(dummy_size%,3))}
            trns_4&=INT{ADD(itrans%,MUL(dummy_size%,4))}
            trns_5&=INT{ADD(itrans%,MUL(dummy_size%,5))}
            trns_6&=INT{ADD(itrans%,MUL(dummy_size%,6))}
            trns_7&=INT{ADD(itrans%,MUL(dummy_size%,7))}
            '
            FOR jtrans&=1 TO 16
              '
              trns_8&=SHR&(trns_0&,15)
              ADD trns_8&,SHL&(SHR&(trns_1&,15),1)
              ADD trns_8&,SHL&(SHR&(trns_2&,15),2)
              ADD trns_8&,SHL&(SHR&(trns_3&,15),3)
              ADD trns_8&,SHL&(SHR&(trns_4&,15),4)
              ADD trns_8&,SHL&(SHR&(trns_5&,15),5)
              ADD trns_8&,SHL&(SHR&(trns_6&,15),6)
              ADD trns_8&,SHL&(SHR&(trns_7&,15),7)
              '
              trns_0&=SHL&(trns_0&,1)
              trns_1&=SHL&(trns_1&,1)
              trns_2&=SHL&(trns_2&,1)
              trns_3&=SHL&(trns_3&,1)
              trns_4&=SHL&(trns_4&,1)
              trns_5&=SHL&(trns_5&,1)
              trns_6&=SHL&(trns_6&,1)
              trns_7&=SHL&(trns_7&,1)
              '
              INT{ktrans%}=CARD(color(trans_pal|(trns_8&)))
              ADD ktrans%,2
              '
            NEXT jtrans&
          NEXT itrans%
          SUB file_adr%,20
          good!=TRUE
        CASE 24
          dummy_size%=SHL&(MUL(INT{ADD(file_adr%,6)},INT{ADD(file_adr%,8)}),1)
          ADD file_adr%,20
          dummy_cale%=SUB(ADD(file_adr%,dummy_size%),2)
          ktrans%=LONG{mfdb_adr%}
          FOR itrans%=file_adr% TO dummy_cale% STEP 2
            '
            trns_0&=INT{itrans%}
            trns_1&=INT{ADD(itrans%,dummy_size%)}
            trns_2&=INT{ADD(itrans%,MUL(dummy_size%,2))}
            trns_3&=INT{ADD(itrans%,MUL(dummy_size%,3))}
            trns_4&=INT{ADD(itrans%,MUL(dummy_size%,4))}
            trns_5&=INT{ADD(itrans%,MUL(dummy_size%,5))}
            trns_6&=INT{ADD(itrans%,MUL(dummy_size%,6))}
            trns_7&=INT{ADD(itrans%,MUL(dummy_size%,7))}
            '
            FOR jtrans&=1 TO 16
              '
              trns_8&=SHR&(trns_0&,15)
              ADD trns_8&,SHL&(SHR&(trns_1&,15),1)
              ADD trns_8&,SHL&(SHR&(trns_2&,15),2)
              ADD trns_8&,SHL&(SHR&(trns_3&,15),3)
              ADD trns_8&,SHL&(SHR&(trns_4&,15),4)
              ADD trns_8&,SHL&(SHR&(trns_5&,15),5)
              ADD trns_8&,SHL&(SHR&(trns_6&,15),6)
              ADD trns_8&,SHL&(SHR&(trns_7&,15),7)
              '
              trns_0&=SHL&(trns_0&,1)
              trns_1&=SHL&(trns_1&,1)
              trns_2&=SHL&(trns_2&,1)
              trns_3&=SHL&(trns_3&,1)
              trns_4&=SHL&(trns_4&,1)
              trns_5&=SHL&(trns_5&,1)
              trns_6&=SHL&(trns_6&,1)
              trns_7&=SHL&(trns_7&,1)
              '
              dummy%=color(trans_pal|(trns_8&))
              BYTE{ktrans%}=BYTE(SHR(dummy%,15))
              INC ktrans%
              BYTE{ktrans%}=BYTE(SHR(dummy%,7))
              INC ktrans%
              BYTE{ktrans%}=BYTE(dummy%)
              INC ktrans%
              '
            NEXT jtrans&
          NEXT itrans%
          SUB file_adr%,20
          good!=TRUE
        CASE 32
          dummy_size%=SHL&(MUL(INT{ADD(file_adr%,6)},INT{ADD(file_adr%,8)}),1)
          ADD file_adr%,20
          dummy_cale%=SUB(ADD(file_adr%,dummy_size%),2)
          ktrans%=LONG{mfdb_adr%}
          FOR itrans%=file_adr% TO dummy_cale% STEP 2
            '
            trns_0&=INT{itrans%}
            trns_1&=INT{ADD(itrans%,dummy_size%)}
            trns_2&=INT{ADD(itrans%,MUL(dummy_size%,2))}
            trns_3&=INT{ADD(itrans%,MUL(dummy_size%,3))}
            trns_4&=INT{ADD(itrans%,MUL(dummy_size%,4))}
            trns_5&=INT{ADD(itrans%,MUL(dummy_size%,5))}
            trns_6&=INT{ADD(itrans%,MUL(dummy_size%,6))}
            trns_7&=INT{ADD(itrans%,MUL(dummy_size%,7))}
            '
            FOR jtrans&=1 TO 16
              '
              trns_8&=SHR&(trns_0&,15)
              ADD trns_8&,SHL&(SHR&(trns_1&,15),1)
              ADD trns_8&,SHL&(SHR&(trns_2&,15),2)
              ADD trns_8&,SHL&(SHR&(trns_3&,15),3)
              ADD trns_8&,SHL&(SHR&(trns_4&,15),4)
              ADD trns_8&,SHL&(SHR&(trns_5&,15),5)
              ADD trns_8&,SHL&(SHR&(trns_6&,15),6)
              ADD trns_8&,SHL&(SHR&(trns_7&,15),7)
              '
              trns_0&=SHL&(trns_0&,1)
              trns_1&=SHL&(trns_1&,1)
              trns_2&=SHL&(trns_2&,1)
              trns_3&=SHL&(trns_3&,1)
              trns_4&=SHL&(trns_4&,1)
              trns_5&=SHL&(trns_5&,1)
              trns_6&=SHL&(trns_6&,1)
              trns_7&=SHL&(trns_7&,1)
              '
              LONG{ktrans%}=color(trans_pal|(trns_8&))
              ADD ktrans%,4
              '
            NEXT jtrans&
          NEXT itrans%
          SUB file_adr%,20
          good!=TRUE
        ENDSELECT
      ENDIF
    ENDIF
  ENDIF
  '
  RETURN good!
ENDFUNC
> FUNCTION load_dgx(pdgx_name$)
  $F%
  LOCAL dgx_handle&,dgx_len%,dgx_filename$,dgx_pos&
  ~FRE(0)
  dgx_ptr%=0
  '
  dgx_pos&=RINSTR(pdgx_name$,"\")
  dgx_filename$=LEFT$(pdgx_name$,PRED(dgx_pos&))+".DGX"
  dgi_filename$=MID$(pdgx_name$,SUCC(dgx_pos&))
  dgi_filename$=LEFT$(dgi_filename$,PRED(INSTR(dgi_filename$,".")))
  IF LEN(dgi_filename$)<8
    dgi_filename$=dgi_filename$+SPACE$(MAX(SUB(8,LEN(dgi_filename$))))
  ENDIF
  '
  IF EXIST(dgx_filename$)
    IF dgx_filename$=old_dgx_filename$
      dgx_ptr%=@search_into_dgx(dgi_filename$)
    ENDIF
    '
    IF dgx_ptr%=0
      '
      dgx_handle&=FOPEN(dgx_filename$,0)
      IF dgx_handle&>0
        dgx_len%=FSEEK(0,dgx_handle&,2)
        ~FSEEK(0,dgx_handle&,0)
        IF dgx_buffer_len%<SHL(SHR(ADD(dgx_len%,32),4),4)
          @mxfree(dgx_adr%)
          dgx_adr%=0
          dgx_buffer_len%=SHL(SHR(ADD(dgx_len%,32),4),4)
        ENDIF
        IF dgx_adr%<1
          dgx_adr%=@mxalloc(dgx_buffer_len%,3)
        ENDIF
        IF dgx_adr%>0
          ~FREAD(dgx_handle&,dgx_len%,dgx_adr%)
          '
          old_dgx_filename$=dgx_filename$
          dgx_ptr%=@search_into_dgx(dgi_filename$)
          '
        ENDIF
        ~FCLOSE(dgx_handle&)
      ENDIF
      '
    ENDIF
  ELSE
    '
    @mxfree(dgx_adr%)
    dgx_adr%=0
    '
    dgx_handle&=FOPEN(pdgx_name$,0)
    IF dgx_handle&>0
      dgx_len%=FSEEK(0,dgx_handle&,2)
      ~FSEEK(0,dgx_handle&,0)
      IF dgx_buffer_len%<SHL(SHR(ADD(dgx_len%,32),4),4)
        @mxfree(dgx_adr%)
        dgx_adr%=0
        dgx_buffer_len%=SHL(SHR(ADD(dgx_len%,32),4),4)
      ENDIF
      IF dgx_adr%<1
        dgx_adr%=@mxalloc(dgx_buffer_len%,3)
      ENDIF
      IF dgx_adr%>0
        ~FREAD(dgx_handle&,dgx_len%,dgx_adr%)
        '
        dgx_ptr%=dgx_adr%
        '
      ENDIF
      ~FCLOSE(dgx_handle&)
    ENDIF
  ENDIF
  '
  RETURN dgx_ptr%
ENDFUNC
> FUNCTION search_into_dgx(pdgi_name$)
  $F%
  LOCAL sdgx_ptr%,sdgx_name$,sdgx_len&,sdgx_cpt&
  sdgx_adr%=0
  sdgx_cpt&=0
  '
  IF dgx_adr%>0
    IF MKL$(LONG{dgx_adr%})="_DGX"
      sdgx_len&=INT{ADD(dgx_adr%,4)}
      IF sdgx_len&>0
        sdgx_ptr%=ADD(dgx_adr%,6)
        DO
          sdgx_name$=MKL$(LONG{sdgx_ptr%})+MKL$(LONG{ADD(sdgx_ptr%,4)})
          IF sdgx_name$=pdgi_name$
            sdgx_adr%=ADD(dgx_adr%,LONG{ADD(sdgx_ptr%,8)})
            sdgx_cpt&=sdgx_len&
          ENDIF
          INC sdgx_cpt&
          ADD sdgx_ptr%,12
        LOOP UNTIL sdgx_cpt&>=sdgx_len&
      ENDIF
    ENDIF
  ENDIF
  '
  RETURN sdgx_adr%
ENDFUNC
> PROCEDURE load_palette
  LOCAL filename_palette$,file_handle&
  '
  filename_palette$=application_path$+"COLORS.P08"+c0$
  '
  IF EXIST(filename_palette$) AND (palette_work%>0)
    file_handle&=FOPEN(filename_palette$,0)
    IF file_handle&>0
      ~FSEEK(12,file_handle&,0)
      IF FREAD(file_handle&,1536,palette_work%)=1536
        '
        IF _B>8
          FOR itrans&=0 TO 255
            r&=INT{ADD(palette_work%,MUL(itrans&,6))}
            g&=INT{ADD(ADD(palette_work%,2),MUL(itrans&,6))}
            b&=INT{ADD(ADD(palette_work%,4),MUL(itrans&,6))}
            r|=BYTE((r&/1000)*255)
            g|=BYTE((g&/1000)*255)
            b|=BYTE((b&/1000)*255)
            LET color(itrans&)=@trns_pix(r|,g|,b|)
          NEXT itrans&
        ENDIF
      ENDIF
      ~FCLOSE(file_handle&)
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][ Need COLORS.P08 file ][ Quit ]")
    leave
  ENDIF
  '
RETURN
'
> PROCEDURE main
  @set_values1
  @create_win
  @v_hide_c
  @clear_win
  @set_values2
  exit!=FALSE
  DO
    @draw_win
  LOOP UNTIL exit!
  @v_show_c
  @leave
RETURN
'
> PROCEDURE create_win
  hand_win&=WIND_CREATE(&X0,30,30,30,30)
  IF hand_win&>0
    wx&=_DX
    wy&=_DY
    wl&=_DW
    wh&=_DH
    win!=TRUE
    IF WIND_OPEN(hand_win&,wx&,wy&,wl&,wh&)=0
      ~FORM_ALERT(1,"[1][ Can't open window ][ Quit ]")
      @leave
    ELSE
      ~WIND_GET(hand_win&,4,xd&,yd&,wd&,hd&)
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][ No window available ][ Quit ]")
    @leave
  ENDIF
  aff!=win!
RETURN
> PROCEDURE set_values1
  '
  @rnd_init
  @save_colors
  @load_palette
  @load_images
  '
RETURN
> PROCEDURE set_values2
  '
  soldae_width&=SHL&(SHR&(MIN(soldae_width&,wd&),4),4)
  '
  IF scale_view!=FALSE AND soldae_width&<>304
    soldae_with_clouds!=FALSE
  ENDIF
  '
  ' offscreen
  '
  img_x&(1)=0
  img_y&(1)=0
  img_w&(1)=soldae_width&
  img_h&(1)=hd&
  '
  ' screen
  '
  img_x&(0)=MAX(xd&,SHR(SUB(wd&,img_w&(1)),1))
  img_y&(0)=yd&
  img_w&(0)=img_w&(1)
  img_h&(0)=hd&
  '
  '
  LONG{off_mfdb%}=@mxalloc(ADD(MUL(MUL(img_h&(1),SHR&(ADD(img_w&(1),15),4)),SHL&(bitplane_number&,1)),16),3)
  IF LONG{off_mfdb%}>0
    '
    INT{ADD(off_mfdb%,4)}=img_w&(1)
    INT{ADD(off_mfdb%,6)}=img_h&(1)
    INT{ADD(off_mfdb%,8)}=SHR&(ADD(img_w&(1),15),4)
    INT{ADD(off_mfdb%,10)}=0
    IF mode_32k!
      INT{ADD(off_mfdb%,12)}=15
    ELSE
      INT{ADD(off_mfdb%,12)}=bitplane_number&
    ENDIF
    INT{ADD(off_mfdb%,14)}=0
    INT{ADD(off_mfdb%,16)}=0
    INT{ADD(off_mfdb%,18)}=0
    '
  ELSE
    leave
  ENDIF
  '
  IF GETCOOKIE(CVL("EdDI"))=TRUE AND LONG{off_mfdb%}>0
    '
    INTIN(0)=1
    INTIN(1)=1
    INTIN(2)=1
    INTIN(3)=1
    INTIN(4)=1
    INTIN(5)=1
    INTIN(6)=1
    INTIN(7)=1
    INTIN(8)=1
    INTIN(9)=1
    INTIN(10)=2
    INTIN(11)=PRED(img_w&(1))
    INTIN(12)=PRED(img_h&(1))
    INTIN(13)=pixel_width_micron&
    INTIN(14)=pixel_height_micron&
    INTIN(15)=0
    INTIN(16)=0
    INTIN(17)=0
    INTIN(18)=0
    INTIN(19)=0
    '
    off_handle&=V_OPNBM(off_mfdb%,GRAF_HANDLE())
    offscreen_enabled!=(off_handle&>0)
  ELSE
    off_handle&=-1
    offscreen_enabled!=FALSE
  ENDIF
  '
  @set_colors
  '
  @general_ini
  @sky_ini
  @tower_ini
  @boss_ini
  '
RETURN
> PROCEDURE close_win
  IF win!
    ~WIND_CLOSE(hand_win&)
    ~WIND_DELETE(hand_win&)
    win!=FALSE
    aff!=FALSE
  ENDIF
RETURN
> PROCEDURE clear_win
  V~H=-1
  ~VSF_COLOR(1)
  ~VS_CLIP(1,xd&,yd&,ADD(xd&,PRED(wd&)),ADD(yd&,PRED(hd&)))
  ~V_BAR(xd&,yd&,ADD(xd&,PRED(wd&)),ADD(yd&,PRED(hd&)))
  ~VS_CLIP(0,xd&,yd&,ADD(xd&,PRED(wd&)),ADD(yd&,PRED(hd&)))
RETURN
> PROCEDURE draw_win
  '
  V~H=off_handle&
  '
  @boss_move
  @boss_animate
  @danfire_move
  @wolf_move
  '
  @sky_draw_background
  @boss_draw
  @wolf_draw
  @tower_draw
  @sky_draw_foreground
  '
  @danfire_draw
  '
  V~H=-1
  '
  @screen_display
  '
  IF soldae_delay&>0
    ~EVNT_TIMER(soldae_delay&)
  ENDIF
  '
  ~GRAF_MKSTATE(gm_x&,gm_y&,gm_s&,gk_s&)
  IF BCONSTAT(2) OR gm_s&>0 OR gk_s&>0
    exit!=TRUE
  ENDIF
  '
RETURN
'
> PROCEDURE general_ini
  '
  center_x&=SHR(img_w&(1),1)
  center_w&=128
  IF soldae_with_tower!
    center_y&=SHR(SUB(img_h&(1),img_h&(40)),1)
  ELSE
    center_y&=SHR(img_h&(1),1)
  ENDIF
  center_h&=128
  '
RETURN
'
> PROCEDURE sky_ini
  '
  sky_rate=1
  sky_mid&=SHR(img_h&(47),2)
  '
  IF soldae_with_clouds!=TRUE AND soldae_width&<>304
    sky_rate=img_w&(1)/img_w&(49)
    sky_mid&=50
  ENDIF
  '
RETURN
> PROCEDURE sky_draw_background
  LOCAL sky_rx&,sky_ry&,sky_id&
  '
  IF soldae_with_clouds!
    '
    sky_id&=MAX(49,MIN(ADD(49,@rnd_get(10)),58))
    '
    IF scale_view!=TRUE AND soldae_width&<>304
      '
      sky_ry&=img_h&(49)*sky_rate
      '
      SET.SXYWH 0,0,img_w&(49),img_h&(49)
      SET.DXYWH 0,0,img_w&(1),sky_ry&
      ~VRO_CPYFM(3 OR &H8000,img_mfdb%(sky_id&),off_mfdb%)
      '
    ELSE
      '
      @image_put(sky_id&,0,0)
      sky_ry&=img_h&(49)
      '
    ENDIF
    '
    IF offscreen_enabled!
      V~H=off_handle&
      ~VSF_COLOR(25)
      ~VS_CLIP(1,0,0,PRED(img_w&(1)),PRED(img_h&(1)))
      ~V_BAR(0,sky_ry&,PRED(img_w&(1)),PRED(img_h&(1)))
      ~VS_CLIP(0,0,0,PRED(img_w&(1)),PRED(img_h&(1)))
    ELSE
      DO
        @image_put(46,0,sky_ry&)
        ADD sky_ry&,img_h&(46)
      LOOP UNTIL sky_ry&>=img_h&(1)
    ENDIF
    '
  ELSE
    '
    IF offscreen_enabled!
      V~H=off_handle&
      ~VSF_COLOR(25)
      ~VS_CLIP(1,0,0,PRED(img_w&(1)),PRED(img_h&(1)))
      ~V_BAR(0,0,PRED(img_w&(1)),PRED(img_h&(1)))
      ~VS_CLIP(0,0,0,PRED(img_w&(1)),PRED(img_h&(1)))
    ELSE
      sky_rx&=0
      sky_ry&=0
      '
      DO
        DO
          @image_put(46,sky_rx&,sky_ry&)
          ADD sky_rx&,img_w&(46)
        LOOP UNTIL sky_rx&>=img_w&(1)
        sky_rx&=0
        ADD sky_ry&,img_h&(46)
      LOOP UNTIL sky_ry&>=img_h&(1)
    ENDIF
    '
  ENDIF
  '
RETURN
> PROCEDURE sky_draw_foreground
  LOCAL sky_fy&,sky_fh&,sky_rh&
  '
  IF soldae_with_clouds!
    IF boss_state&=0
      IF scale_view!=TRUE AND soldae_width&<>304
        '
        sky_fy&=sky_foreground_y&
        sky_fh&=SUB(img_h&(47),sky_fy&)
        sky_rh&=sky_fh&*sky_rate
        '
        IF sky_fh&>0 AND sky_rh&>0
          '
          SET.SXYWH 0,sky_fy&,img_w&(48),sky_fh&
          SET.DXYWH 0,0,img_w&(1),sky_rh&
          ~VRT_CPYFM(raster_mask_mode& OR &H8000,img_mfdb%(48),off_mfdb%,raster_mask_color_0&,raster_mask_color_1&)
          '
          SET.SXYWH 0,sky_fy&,img_w&(47),sky_fh&
          SET.DXYWH 0,0,img_w&(1),sky_rh&
          ~VRO_CPYFM(raster_sprite_mode& OR &H8000,img_mfdb%(47),off_mfdb%)
          '
        ENDIF
      ELSE
        @sprite_put(47,0,-sky_foreground_y&)
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE boss_declare
  '
  DIM boss_mx&(64),boss_my&(64)
  '
  DIM boss_attack&(128)
  '
  boss_attack_max&=0
  '
  DIM danmaku_spr&(256)
  '
  danmaku_spr_max&=0
  '
  danmaku_spr&(danmaku_spr_max&)=69
  INC danmaku_spr_max&
  danmaku_spr&(danmaku_spr_max&)=71
  INC danmaku_spr_max&
  danmaku_spr&(danmaku_spr_max&)=73
  INC danmaku_spr_max&
  '
  FOR i&=81 TO 135 STEP 2
    danmaku_spr&(danmaku_spr_max&)=i&
    INC danmaku_spr_max&
  NEXT i&
  '
  danfire_start&=PRED(danmaku_spr_max&)
  FOR i&=0 TO 19
    danmaku_spr&(danmaku_spr_max&)=137
    INC danmaku_spr_max&
    danmaku_spr&(danmaku_spr_max&)=139
    INC danmaku_spr_max&
    danmaku_spr&(danmaku_spr_max&)=141
    INC danmaku_spr_max&
  NEXT i&
  danfire_end&=SUCC(danmaku_spr_max&)
  '
  FOR i&=143 TO 161 STEP 2
    danmaku_spr&(danmaku_spr_max&)=i&
    INC danmaku_spr_max&
  NEXT i&
  '
  danmaku_spr&(danmaku_spr_max&)=75
  INC danmaku_spr_max&
  danmaku_spr&(danmaku_spr_max&)=77
  INC danmaku_spr_max&
  danmaku_spr&(danmaku_spr_max&)=79
  INC danmaku_spr_max&
  '
  danfire_n_max&=128
  '
  DIM danfire_ng&(danfire_n_max&),danfire_rd&(danfire_n_max&),danfire_an!(danfire_n_max&)
  DIM danfire_cx&(danfire_n_max&),danfire_cy&(danfire_n_max&),danfire_nx&(danfire_n_max&),danfire_ny&(danfire_n_max&)
  '
  DEC danfire_n_max&
  '
  DIM danfire_spr&(20)
  '
  danfire_spr&(0)=255
  danfire_spr&(1)=251
  danfire_spr&(2)=247
  danfire_spr&(3)=243
  danfire_spr&(4)=239
  danfire_spr&(5)=235
  danfire_spr&(6)=231
  danfire_spr&(7)=227
  danfire_spr&(8)=223
  danfire_spr&(9)=219
  danfire_spr&(10)=183
  danfire_spr&(11)=187
  danfire_spr&(12)=191
  danfire_spr&(13)=195
  danfire_spr&(14)=199
  danfire_spr&(15)=203
  danfire_spr&(16)=207
  danfire_spr&(17)=211
  danfire_spr&(18)=215
  '
  danfire_n&=-1
  '
  '
  DIM shoop_spr&(256),shoop_ground_spr&(16)
  '
  shoop_spr_max&=0
  '
  FOR i&=259 TO 305 STEP 2
    shoop_spr&(shoop_spr_max&)=i&
    IF i&=295
      shoop_beam_start&=shoop_spr_max&
    ENDIF
    INC shoop_spr_max&
  NEXT i&
  '
  FOR j&=0 TO 3
    FOR i&=307 TO 337 STEP 2
      shoop_spr&(shoop_spr_max&)=i&
      INC shoop_spr_max&
    NEXT i&
  NEXT j&
  '
  FOR i&=339 TO 395 STEP 2
    IF i&=339
      shoop_beam_end&=shoop_spr_max&
    ENDIF
    shoop_spr&(shoop_spr_max&)=i&
    INC shoop_spr_max&
  NEXT i&
  '
  shoop_ground_spr_max&=0
  FOR i&=399 TO 413 STEP 2
    shoop_ground_spr&(shoop_ground_spr_max&)=i&
    INC shoop_ground_spr_max&
  NEXT i&
  '
  '
  DIM reactor_left_spr&(256),reactor_right_spr&(256)
  '
  reactor_left_spr_max&=0
  '
  FOR i&=415 TO 449 STEP 2
    reactor_left_spr&(reactor_left_spr_max&)=i&
    INC reactor_left_spr_max&
  NEXT i&
  '
  FOR i&=0 TO 9
    reactor_left_spr&(reactor_left_spr_max&)=451
    INC reactor_left_spr_max&
    reactor_left_spr&(reactor_left_spr_max&)=453
    INC reactor_left_spr_max&
    reactor_left_spr&(reactor_left_spr_max&)=455
    INC reactor_left_spr_max&
    reactor_left_spr&(reactor_left_spr_max&)=453
    INC reactor_left_spr_max&
  NEXT i&
  '
  FOR i&=455 TO 485 STEP 2
    reactor_left_spr&(reactor_left_spr_max&)=i&
    IF i&=459
      reactor_birth_wolf_left&=reactor_left_spr_max&
    ENDIF
    INC reactor_left_spr_max&
  NEXT i&
  '
  reactor_right_spr_max&=0
  '
  FOR i&=487 TO 521 STEP 2
    reactor_right_spr&(reactor_right_spr_max&)=i&
    INC reactor_right_spr_max&
  NEXT i&
  '
  FOR i&=0 TO 9
    reactor_right_spr&(reactor_right_spr_max&)=523
    INC reactor_right_spr_max&
    reactor_right_spr&(reactor_right_spr_max&)=525
    INC reactor_right_spr_max&
    reactor_right_spr&(reactor_right_spr_max&)=527
    INC reactor_right_spr_max&
    reactor_right_spr&(reactor_right_spr_max&)=525
    INC reactor_right_spr_max&
  NEXT i&
  '
  FOR i&=527 TO 557 STEP 2
    reactor_right_spr&(reactor_right_spr_max&)=i&
    IF i&=531
      reactor_birth_wolf_right&=reactor_right_spr_max&
    ENDIF
    INC reactor_right_spr_max&
  NEXT i&
  '
  DIM wolf_spr&(12),wolf_spr_ng&(2,360)
  DIM wolf_wx&(2,12),wolf_wy&(2,12),wolf_ng&(2,12),wolf_rd&(12),wolf_cx&(2),wolf_cy&(2),wolf_an&(2)
  DIM wolf_st&(2),wolf_cn&(2),wolf_cr&(2)
  '
  wolf_round_wide&=7
  '
  FOR a&=0 TO 359
    wolf_spr_ng&(0,a&)=@wolf_get_ng_spr(0,a&)
  NEXT a&
  FOR a&=0 TO 359
    wolf_spr_ng&(1,a&)=@wolf_get_ng_spr(1,a&)
  NEXT a&
  '
  wolf_spr&(0)=559 ! head
  wolf_spr&(1)=623 ! legs
  wolf_spr&(2)=687 ! tail0
  wolf_spr&(3)=751 ! tail1
  wolf_spr&(4)=815 ! tail2
  wolf_spr&(5)=879 ! tail3
  wolf_spr&(6)=943 ! tail4
  wolf_spr&(7)=945 ! tail5
  wolf_spr&(8)=947 ! tail6
  wolf_spr&(9)=949 ! tail7
  wolf_spr&(10)=951 ! tail8
  wolf_spr&(11)=953 ! tail9
  '
  wolf_rd&(0)=10 ! head-legs
  wolf_rd&(1)=17 ! legs-tail0
  wolf_rd&(2)=17 ! tail0-tail1
  wolf_rd&(3)=17 ! tail1-tail2
  wolf_rd&(4)=17 ! tail2-tail3
  wolf_rd&(5)=15 ! tail3-tail4
  wolf_rd&(6)=13 ! tail4-tail5
  wolf_rd&(7)=11 ! tail5-tail6
  wolf_rd&(8)=10 ! tail6-tail7
  wolf_rd&(9)=9  ! tail7-tail8
  wolf_rd&(10)=8 ! tail8-tail9
  '
  DIM explode_an&(2)
  '
  explode_spr_id&=960
  explode_spr_max&=24
  '
RETURN
> PROCEDURE boss_ini
  '
  boss_wx&=-SHR(img_w&(10),2)
  boss_wy&=img_h&(47)
  boss_ww&=SUB(img_w&(1),SHR(img_w&(10),1))
  boss_wh&=SUB(img_h&(1),ADD(img_h&(40),ADD(img_h&(47),img_h&(10))))
  '
  IF soldae_with_tower!
    shoop_wx&=SUB(tower_top_x&,SHR(img_w&(10),2))
    shoop_ww&=SUB(img_w&(40),SHR(img_w&(10),1))
  ENDIF
  '
  boss_cx&=SUB(img_w&(1),img_w&(10))
  boss_cx&=MAX(0,MIN(@rnd_get(boss_cx&),boss_cx&))
  boss_cy&=-img_h&(10)
  boss_state&=0
  '
  boss_dy&=0
  boss_dy_max&=3
  boss_stay_delay_max&=5
  boss_stay_delay&=boss_stay_delay_max&
  '
  FOR boss_i&=0 TO 63
    boss_mx&(boss_i&)=0
    boss_my&(boss_i&)=0
  NEXT boss_i&
  boss_mv&=0
  '
  boss_dead_delay_max&=15
  boss_dead_delay&=boss_dead_delay_max&
  boss_dead_anim&=0
  '
  jewel_anim&=0
  jewel_anim_max&=7
  jewel_anim_delay_max&=5
  jewel_anim_delay&=jewel_anim_delay_max&
  '
  sky_foreground_y&=0
  '
  '
  danmaku_anim&=0
  danmaku_anim_max&=danmaku_spr_max&
  danmaku_anim_delay_max&=3
  danmaku_anim_delay&=danmaku_anim_delay_max&
  '
  danfire_dx&=ADD(img_x&(12),SHR(img_w&(12),2))
  danfire_dy&=ADD(img_y&(12),SHR(img_h&(12),2))
  '
  shoop_anim&=0
  shoop_anim_max&=shoop_spr_max&
  shoop_anim_delay_max&=3
  shoop_anim_delay&=shoop_anim_delay_max&
  '
  shoop_ground_anim&=0
  '
  reactor_anim&=0
  reactor_anim_max&=reactor_left_spr_max&
  reactor_anim_delay_max&=3
  reactor_anim_delay&=reactor_anim_delay_max&
  '
  @wolf_ini
  '
  danmaku_nb_attack&=soldae_with_danmaku_attacks&
  shoop_nb_attack&=soldae_with_shoop_attacks&
  spirit_nb_attack_left&=soldae_with_spirit_attacks&
  spirit_nb_attack_right&=soldae_with_spirit_attacks&
  '
  boss_attack_cur&=0
  boss_attack_max&=0
  '
  WHILE (danmaku_nb_attack&>0 OR shoop_nb_attack&>0 OR spirit_nb_attack_left&>0 OR spirit_nb_attack_right&>0) AND boss_attack_max&<128
    IF danmaku_nb_attack&>0
      boss_attack&(boss_attack_max&)=3
      DEC danmaku_nb_attack&
      INC boss_attack_max&
    ENDIF
    IF shoop_nb_attack&>0
      boss_attack&(boss_attack_max&)=4
      DEC shoop_nb_attack&
      INC boss_attack_max&
    ENDIF
    IF spirit_nb_attack_left&>0
      boss_attack&(boss_attack_max&)=5
      DEC spirit_nb_attack_left&
      INC boss_attack_max&
    ENDIF
    IF spirit_nb_attack_right&>0
      boss_attack&(boss_attack_max&)=6
      DEC spirit_nb_attack_right&
      INC boss_attack_max&
    ENDIF
  WEND
  '
RETURN
> PROCEDURE boss_move
  '
  SELECT boss_state&
  CASE 0 ! descend
    '
    INC boss_cy&
    IF boss_cy&>sky_mid&
      IF sky_foreground_y&>img_h&(47)
        boss_state&=1
      ELSE
        INC sky_foreground_y&
      ENDIF
    ENDIF
    '
  CASE 1 ! stay
    '
    DEC boss_stay_delay&
    '
    IF boss_stay_delay&<0
      boss_stay_delay&=boss_stay_delay_max&
      '
      INC boss_dy&
      IF boss_dy&>=boss_dy_max&
        boss_dy&=-boss_dy_max&
      ENDIF
      '
      IF boss_dy&=0
        SELECT @rnd_get(100)
        CASE 33 TO 66
          boss_attack!=FALSE
          boss_state&=2
          boss_reset_move
        CASE 67 TO 99
          IF boss_attack_max&>0
            boss_attack!=TRUE
          ENDIF
        DEFAULT
          boss_attack!=FALSE
        ENDSELECT
        '
        IF boss_attack!
          IF boss_attack_cur&=boss_attack_max&
            boss_state&=666
          ELSE
            boss_state&=boss_attack&(boss_attack_cur&)
            INC boss_attack_cur&
          ENDIF
          boss_reset_move
          '
          IF boss_state&=3
            IF @rnd_get(100)<50
              danmaku_dx&=1
            ELSE
              danmaku_dx&=-1
            ENDIF
            danfire_ini
          ELSE IF boss_state&=4
            boss_state&=24
          ENDIF
        ENDIF
        '
      ENDIF
    ENDIF
    '
  CASE 2,24 ! move
    '
    IF boss_mv&<1
      '
      boss_cx&=boss_nx&
      boss_cy&=boss_ny&
      '
      IF @rnd_get(100)<50 AND boss_state&=2
        boss_state&=1
      ELSE
        '
        IF boss_state&=24
          IF soldae_with_tower!
            boss_nx&=SHR(SUB(img_w&(1),img_w&(10)),1)
            ADD boss_nx&,SUB(@rnd_get(100),50)
            IF @rnd_get(100)<50
              shoop_dx&=1
            ELSE
              shoop_dx&=-1
            ENDIF
            boss_ny&=SUB(img_h&(1),303)
          ELSE
            boss_nx&=ADD(boss_wx&,@rnd_get(boss_ww&))
            IF boss_nx&<SHR(img_w&(1),1)
              shoop_dx&=1
            ELSE
              shoop_dx&=-1
            ENDIF
            boss_ny&=SUB(img_h&(1),251)
          ENDIF
        ELSE
          boss_nx&=ADD(boss_wx&,@rnd_get(boss_ww&))
          boss_ny&=ADD(boss_wy&,@rnd_get(boss_wh&))
        ENDIF
        '
        boss_cn&=SUB(boss_nx&,boss_cx&)
        FOR boss_i&=63 TO 0 STEP -1
          boss_mx&(boss_i&)=boss_cn&*(SUB(63,boss_i&)/63)
        NEXT boss_i&
        '
        boss_cn&=SUB(boss_ny&,boss_cy&)
        FOR boss_i&=63 TO 0 STEP -1
          boss_my&(boss_i&)=boss_cn&*(SUB(63,boss_i&)/63)
        NEXT boss_i&
        '
        boss_mv&=63
      ENDIF
    ELSE
      DEC boss_mv&
      '
      IF boss_state&=24 AND boss_mv&<1
        boss_state&=4
        boss_cx&=boss_nx&
        boss_cy&=boss_ny&
      ENDIF
    ENDIF
    '
  CASE 3 ! danmaku
    '
    ADD boss_cx&,danmaku_dx&
    '
    IF boss_cx&>ADD(boss_wx&,boss_ww&)
      danmaku_dx&=-1
    ELSE IF boss_cx&<boss_wx&
      danmaku_dx&=1
    ENDIF
    '
    IF danmaku_anim&>danfire_start& AND danmaku_anim&<danfire_end&
      IF MOD(boss_cx&,3)=0
        @danfire_add
      ENDIF
    ENDIF
    '
  CASE 4 ! shoop da whoop
    '
    IF shoop_anim&>shoop_beam_start&
      ADD boss_cx&,shoop_dx&
    ENDIF
    '
    IF soldae_with_tower!
      IF boss_cx&>ADD(shoop_wx&,shoop_ww&)
        shoop_dx&=-1
      ELSE IF boss_cx&<shoop_wx&
        shoop_dx&=1
      ENDIF
    ELSE
      IF boss_cx&>ADD(boss_wx&,boss_ww&)
        shoop_dx&=-1
      ELSE IF boss_cx&<boss_wx&
        shoop_dx&=1
      ENDIF
    ENDIF
    '
  CASE 5 ! wolf spirit left reactor
    '
    IF reactor_anim&=reactor_birth_wolf_left&
      @wolf_add(0)
    ENDIF
    '
  CASE 6 ! wolf spirit right reactor
    '
    IF reactor_anim&=reactor_birth_wolf_right&
      @wolf_add(1)
    ENDIF
    '
  CASE 666! dead
    '
    INC boss_cy&
    IF boss_cy&>img_h&(1)
      @boss_ini
    ENDIF
    '
  ENDSELECT
  '
RETURN
> PROCEDURE boss_reset_move
  '
  boss_nx&=boss_cx&
  boss_ny&=boss_cy&
  '
  FOR boss_i&=0 TO 63
    boss_mx&(boss_i&)=0
    boss_my&(boss_i&)=0
  NEXT boss_i&
  boss_mv&=0
  '
  SELECT boss_state&
  CASE 3
    danmaku_anim&=0
    danmaku_anim_delay&=danmaku_anim_delay_max&
  CASE 4,24
    shoop_anim&=0
    shoop_anim_delay&=shoop_anim_delay_max&
  CASE 5,6
    reactor_anim&=0
    reactor_anim_delay&=reactor_anim_delay_max&
  ENDSELECT
  '
RETURN
> PROCEDURE boss_animate
  '
  SELECT boss_state&
  CASE 0,1,2 ! descend, stay
    '
    DEC jewel_anim_delay&
    '
    IF jewel_anim_delay&<0
      jewel_anim_delay&=jewel_anim_delay_max&
      '
      INC jewel_anim&
      IF jewel_anim&>=jewel_anim_max&
        jewel_anim&=-jewel_anim_max&
      ENDIF
    ENDIF
  CASE 3 ! danmaku
    '
    DEC danmaku_anim_delay&
    '
    IF danmaku_anim_delay&<0
      danmaku_anim_delay&=danmaku_anim_delay_max&
      '
      INC danmaku_anim&
      IF danmaku_anim&>=danmaku_anim_max&
        danmaku_anim&=-1
        boss_state&=1
      ENDIF
    ENDIF
  CASE 4 ! shoop da whoop
    '
    DEC shoop_anim_delay&
    '
    IF shoop_anim_delay&<0
      shoop_anim_delay&=shoop_anim_delay_max&
      '
      INC shoop_anim&
      IF shoop_anim&>=shoop_anim_max&
        shoop_anim&=-1
        boss_state&=1
      ENDIF
    ENDIF
    '
    IF soldae_with_tower!
      INC shoop_ground_anim&
      IF shoop_ground_anim&>shoop_ground_spr_max&
        shoop_ground_anim&=0
      ENDIF
    ENDIF
    '
  CASE 5,6 ! wolf spirit reactors
    '
    DEC reactor_anim_delay&
    '
    IF reactor_anim_delay&<0
      reactor_anim_delay&=reactor_anim_delay_max&
      '
      INC reactor_anim&
      IF reactor_anim&>=reactor_anim_max&
        reactor_anim&=-1
        boss_state&=1
      ENDIF
    ENDIF
  CASE 666 ! dead
    IF boss_dead_anim&<5
      DEC boss_dead_delay&
      IF boss_dead_delay&=0
        boss_dead_delay&=boss_dead_delay_max&
        '
        INC boss_dead_anim&
      ENDIF
    ENDIF
  ENDSELECT
  '
RETURN
> PROCEDURE boss_draw
  '
  SELECT boss_state&
  CASE 0 ! descend
    '
    @sprite_put(10,boss_cx&,boss_cy&)
    @sprite_put(ADD(12,MUL(ABS(jewel_anim&),2)),boss_cx&,boss_cy&)
    '
  CASE 1 ! stay
    '
    @sprite_put(10,boss_cx&,ADD(boss_cy&,ABS(boss_dy&)))
    @sprite_put(ADD(12,MUL(ABS(jewel_anim&),2)),boss_cx&,ADD(boss_cy&,ABS(boss_dy&)))
    '
  CASE 2,24 ! move
    '
    @sprite_put(10,ADD(boss_cx&,boss_mx&(boss_mv&)),ADD(boss_cy&,boss_my&(boss_mv&)))
    @sprite_put(ADD(12,MUL(ABS(jewel_anim&),2)),ADD(boss_cx&,boss_mx&(boss_mv&)),ADD(boss_cy&,boss_my&(boss_mv&)))
    '
  CASE 3 ! danmaku
    '
    IF danmaku_anim&>-1
      IF danmaku_anim&<3
        @sprite_put(danmaku_spr&(danmaku_anim&),boss_cx&,boss_cy&)
      ELSE
        IF danmaku_anim&<SUB(danmaku_anim_max&,2)
          @sprite_put(danmaku_spr&(2),boss_cx&,boss_cy&)
          @sprite_put(danmaku_spr&(danmaku_anim&),boss_cx&,boss_cy&)
        ELSE
          @sprite_put(danmaku_spr&(danmaku_anim&),boss_cx&,boss_cy&)
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 4 ! shoop da whoop
    '
    @sprite_put(10,boss_cx&,boss_cy&)
    IF shoop_anim&>-1
      @sprite_put(shoop_spr&(shoop_anim&),boss_cx&,boss_cy&)
    ENDIF
    '
    IF soldae_with_tower!
      IF shoop_anim&>shoop_beam_start& AND shoop_anim&<shoop_beam_end&
        @sprite_put(shoop_ground_spr&(shoop_ground_anim&),ADD(boss_cx&,SHR(SUB(img_w&(10),img_w&(shoop_ground_spr&(shoop_ground_anim&))),1)),SUB(tower_top_y&,SHR(MUL(img_h&(shoop_ground_spr&(shoop_ground_anim&)),3),2)))
      ENDIF
    ENDIF
    '
  CASE 5 ! wolf spirit left reactor
    '
    @sprite_put(10,boss_cx&,boss_cy&)
    IF reactor_anim&>-1
      @sprite_put(reactor_left_spr&(reactor_anim&),boss_cx&,boss_cy&)
    ENDIF
    '
  CASE 6 ! wolf spirit right reactor
    '
    @sprite_put(10,boss_cx&,boss_cy&)
    IF reactor_anim&>-1
      @sprite_put(reactor_right_spr&(reactor_anim&),boss_cx&,boss_cy&)
    ENDIF
    '
  CASE 666 ! dead
    '
    @sprite_put(ADD(28,MUL(boss_dead_anim&,2)),boss_cx&,boss_cy&)
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE danfire_ini
  '
  FOR df&=0 TO danfire_n_max&
    danfire_ng&(df&)=@rnd_get(180)
    danfire_rd&(df&)=16
  NEXT df&
  '
  danfire_n&=-1
  '
RETURN
> PROCEDURE danfire_add
  '
  danfire_n&=MIN(SUCC(danfire_n&),danfire_n_max&)
  '
  IF danfire_n&>-1 AND danfire_n&=<danfire_n_max&
    danfire_cx&(danfire_n&)=ADD(boss_cx&,danfire_dx&)
    danfire_cy&(danfire_n&)=ADD(boss_cy&,danfire_dy&)
    danfire_an!(danfire_n&)=ODD(@rnd_get(100))
  ENDIF
  '
RETURN
> PROCEDURE danfire_move
  '
  IF danfire_n&>-1
    FOR df&=0 TO danfire_n&
      ADD danfire_rd&(df&),4
      danfire_nx&(df&)=ADD(danfire_cx&(df&),danfire_rd&(df&)*COSQ(danfire_ng&(df&)))
      danfire_ny&(df&)=ADD(danfire_cy&(df&),danfire_rd&(df&)*SINQ(danfire_ng&(df&)))
      IF danfire_an!(df&)
        danfire_an!(df&)=FALSE
      ELSE
        danfire_an!(df&)=TRUE
      ENDIF
    NEXT df&
  ENDIF
  '
RETURN
> PROCEDURE danfire_draw
  '
  IF danfire_n&>-1
    FOR df&=0 TO danfire_n&
      df_spr&=danfire_spr&(MAX(0,MIN(DIV(danfire_ng&(df&),10),18)))
      IF danfire_an!(df&)
        ADD df_spr&,2
      ENDIF
      @sprite_put(df_spr&,danfire_nx&(df&),danfire_ny&(df&))
    NEXT df&
  ENDIF
  '
RETURN
'
> PROCEDURE wolf_ini
  '
  wolf_st&(0)=0
  wolf_st&(1)=0
  '
  wolf_an&(0)=9
  wolf_an&(1)=-9
  '
RETURN
> FUNCTION wolf_get_ng_spr(w_id&,w_ng&)
  LOCAL ng_spr_id&
  '
  IF w_id&=0
    ADD w_ng&,180
    IF w_ng&>359
      SUB w_ng&,360
    ENDIF
  ENDIF
  '
  SELECT w_ng&
  CASE 0 TO 7
    ng_spr_id&=0
  CASE 8 TO 22
    ng_spr_id&=1
  CASE 23 TO 37
    ng_spr_id&=2
  CASE 38 TO 52
    ng_spr_id&=3
  CASE 53 TO 64
    ng_spr_id&=4
  CASE 65 TO 74
    ng_spr_id&=5
  CASE 75 TO 84
    ng_spr_id&=6
  CASE 85 TO 94
    ng_spr_id&=7
  CASE 95 TO 104
    ng_spr_id&=8
  CASE 105 TO 114
    ng_spr_id&=9
  CASE 115 TO 124
    ng_spr_id&=10
  CASE 125 TO 134
    ng_spr_id&=11
  CASE 135 TO 144
    ng_spr_id&=12
  CASE 145 TO 154
    ng_spr_id&=13
  CASE 155 TO 164
    ng_spr_id&=14
  CASE 165 TO 174
    ng_spr_id&=15
  CASE 175 TO 184
    ng_spr_id&=16
  CASE 185 TO 194
    ng_spr_id&=17
  CASE 195 TO 204
    ng_spr_id&=18
  CASE 205 TO 214
    ng_spr_id&=19
  CASE 215 TO 224
    ng_spr_id&=20
  CASE 225 TO 234
    ng_spr_id&=21
  CASE 235 TO 244
    ng_spr_id&=22
  CASE 245 TO 254
    ng_spr_id&=23
  CASE 255 TO 264
    ng_spr_id&=24
  CASE 265 TO 274
    ng_spr_id&=25
  CASE 275 TO 284
    ng_spr_id&=26
  CASE 285 TO 294
    ng_spr_id&=27
  CASE 295 TO 304
    ng_spr_id&=28
  CASE 305 TO 324
    ng_spr_id&=29
  CASE 325 TO 339
    ng_spr_id&=30
  CASE 340 TO 354
    ng_spr_id&=31
  CASE 355 TO 359
    ng_spr_id&=0
  ENDSELECT
  '
  RETURN SUB(31,MAX(0,MIN(ng_spr_id&,31)))
ENDFUNC
> PROCEDURE wolf_add(w_id&)
  LOCAL wolf_new_wx&,wolf_new_wy&,wolf_birth_id&
  '
  IF wolf_st&(w_id&)=0
    '
    wolf_st&(w_id&)=1
    explode_an&(w_id&)=0
    '
    wolf_birth_id&=ADD(485,MUL(72,w_id&))
    '
    wolf_new_wx&=ADD(boss_cx&,ADD(img_x&(wolf_birth_id&),SHR(PRED(img_w&(wolf_birth_id&)),1)))
    wolf_new_wy&=ADD(boss_cy&,ADD(img_y&(wolf_birth_id&),SHR(PRED(img_h&(wolf_birth_id&)),1)))
    '
    wolf_cx&(w_id&)=ADD(boss_cx&,SHR(img_w&(10),1))
    wolf_cy&(w_id&)=wolf_new_wy&
    '
    FOR wi&=0 TO 11
      wolf_wx&(w_id&,wi&)=wolf_new_wx&
      wolf_wy&(w_id&,wi&)=wolf_new_wy&
      wolf_ng&(w_id&,wi&)=MUL(180,w_id&)
    NEXT wi&
    '
    wolf_cn&(w_id&)=0
    wolf_cr&(w_id&)=0
    explode_an&(w_id&)=0
    '
  ENDIF
  '
RETURN
> PROCEDURE wolf_move
  LOCAL wolf_new_wx&,wolf_new_wy&,wolf_new_ng&,wolf_new_dl&
  '
  FOR w&=0 TO 1
    '
    SELECT wolf_st&(w&)
    CASE 1 ! rounding
      '
      wolf_new_dl&=MAX(32,MIN(160,SQR(ADD((SUB(wolf_cx&(w&),wolf_wx&(w&,0)))^2,(SUB(wolf_cy&(w&),wolf_wy&(w&,0)))^2))))
      '
      wolf_new_ng&=ADD(wolf_ng&(w&,0),wolf_an&(w&))
      IF wolf_new_ng&<0
        WHILE wolf_new_ng&<0
          ADD wolf_new_ng&,360
          INC wolf_cn&(w&)
        WEND
      ELSE IF wolf_new_ng&>360
        WHILE wolf_new_ng&>360
          SUB wolf_new_ng&,360
          INC wolf_cn&(w&)
        WEND
      ENDIF
      '
      SELECT w&
      CASE 0
        '
        wolf_wx&(0,0)=SUB(wolf_cx&(0),wolf_new_dl&*COSQ(wolf_new_ng&))
        wolf_wy&(0,0)=SUB(wolf_cy&(0),wolf_new_dl&*SINQ(wolf_new_ng&))
        wolf_ng&(0,0)=wolf_new_ng&
        '
        FOR wi&=11 DOWNTO 1
          wolf_ng&(0,wi&)=wolf_ng&(0,PRED(wi&))
        NEXT wi&
        FOR wi&=1 TO 11
          wolf_wx&(0,wi&)=SUB(wolf_wx&(0,PRED(wi&)),wolf_rd&(PRED(wi&))*SINQ(wolf_ng&(0,wi&)))
          wolf_wy&(0,wi&)=SUB(wolf_wy&(0,PRED(wi&)),wolf_rd&(PRED(wi&))*COSQ(wolf_ng&(0,wi&)))
        NEXT wi&
      CASE 1
        '
        wolf_wx&(1,0)=ADD(wolf_cx&(1),wolf_new_dl&*SINQ(wolf_new_ng&))
        wolf_wy&(1,0)=ADD(wolf_cy&(1),wolf_new_dl&*COSQ(wolf_new_ng&))
        wolf_ng&(1,0)=wolf_new_ng&
        '
        FOR wi&=11 DOWNTO 1
          wolf_ng&(1,wi&)=wolf_ng&(1,PRED(wi&))
        NEXT wi&
        FOR wi&=1 TO 11
          wolf_wx&(1,wi&)=ADD(wolf_wx&(1,PRED(wi&)),wolf_rd&(PRED(wi&))*SINQ(wolf_ng&(1,wi&)))
          wolf_wy&(1,wi&)=ADD(wolf_wy&(1,PRED(wi&)),wolf_rd&(PRED(wi&))*COSQ(wolf_ng&(1,wi&)))
        NEXT wi&
      ENDSELECT
      '
      '
      IF wolf_cx&(w&)<SUB(center_x&,center_w&)
        ADD wolf_cx&(w&),ADD(wolf_round_wide&,@rnd_get(wolf_round_wide&))
      ELSE IF wolf_cx&(w&)>ADD(center_x&,center_w&)
        SUB wolf_cx&(w&),ADD(wolf_round_wide&,@rnd_get(wolf_round_wide&))
      ELSE
        ADD wolf_cx&(w&),SUB(@rnd_get(SUCC(SHL(wolf_round_wide&,1))),wolf_round_wide&)
      ENDIF
      '
      IF wolf_cy&(w&)<SUB(center_y&,center_h&)
        ADD wolf_cy&(w&),ADD(wolf_round_wide&,@rnd_get(wolf_round_wide&))
      ELSE IF wolf_cy&(w&)>ADD(center_y&,center_h&)
        SUB wolf_cy&(w&),ADD(wolf_round_wide&,@rnd_get(wolf_round_wide&))
      ELSE
        ADD wolf_cy&(w&),SUB(@rnd_get(SUCC(SHL(wolf_round_wide&,1))),wolf_round_wide&)
      ENDIF
      '
      IF wolf_wx&(w&,1)>SUB(center_x&,center_w&) AND wolf_wx&(w&,1)<ADD(center_x&,center_w&)
        IF wolf_cn&(w&)>7
          IF @rnd_get(100)>90
            wolf_st&(w&)=2
          ENDIF
        ENDIF
      ENDIF
      '
    CASE 2 ! goto crash
      '
      FOR wi&=0 TO 11
        ADD wolf_wy&(w&,wi&),wolf_cr&(w&)
      NEXT wi&
      '
      INC wolf_cr&(w&)
      '
      IF soldae_with_tower!
        IF wolf_wy&(w&,1)>wh&
          wolf_st&(w&)=3
        ENDIF
      ELSE
        IF wolf_wy&(w&,1)>ADD(wh&,128)
          wolf_st&(w&)=0
        ENDIF
      ENDIF
      '
    CASE 3 ! explosion
      '
      INC explode_an&(w&)
      '
      IF explode_an&(w&)>=explode_spr_max&
        wolf_st&(w&)=0
      ENDIF
      '
    ENDSELECT
  NEXT w&
  '
RETURN
> PROCEDURE wolf_draw
  '
  FOR w&=0 TO 1
    SELECT wolf_st&(w&)
    CASE 1,2 ! rouding,crashing
      '
      FOR wi&=11 TO 6 STEP -1
        @sprite_put(wolf_spr&(wi&),wolf_wx&(w&,wi&),wolf_wy&(w&,wi&))
      NEXT wi&
      FOR wi&=5 TO 0 STEP -1
        @sprite_put(ADD(wolf_spr&(wi&),MUL(wolf_spr_ng&(w&,wolf_ng&(w&,wi&)),2)),wolf_wx&(w&,wi&),wolf_wy&(w&,wi&))
      NEXT wi&
      '
    CASE 3 ! explosion
      '
      @sprite_put(ADD(explode_spr_id&,MUL(explode_an&(w&),2)),wolf_wx&(w&,1),ADD(tower_top_y&,10))
      '
    ENDSELECT
  NEXT w&
  '
RETURN
'
> PROCEDURE tower_ini
  '
  tower_statue_dy&=21
  '
  tower_top_x&=SHR(SUB(img_w&(1),img_w&(40)),1)
  tower_top_y&=SUB(img_h&(1),img_h&(40))
  '
  tower_left_x&=tower_top_x&
  tower_left_y&=SUB(ADD(tower_top_y&,tower_statue_dy&),img_h&(42))
  '
  tower_right_x&=ADD(tower_top_x&,SUB(img_w&(40),img_w&(44)))
  tower_right_y&=tower_left_y&
  '
RETURN
> PROCEDURE tower_draw
  IF soldae_with_tower!
    sprite_put(42,tower_left_x&,tower_left_y&)
    sprite_put(44,tower_right_x&,tower_right_y&)
    sprite_put(40,tower_top_x&,tower_top_y&)
  ENDIF
RETURN
'
> PROCEDURE restore_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette_save%>0 AND _B=8
    V~H=-1
    FOR tmp_c&=0 TO 255
      tmp_d&=MUL(tmp_c&,6)
      col_r&=INT{ADD(palette_save%,tmp_d&)}
      col_g&=INT{ADD(palette_save%,ADD(tmp_d&,2))}
      col_b&=INT{ADD(palette_save%,ADD(tmp_d&,4))}
      ~VS_COLOR(tmp_c&,col_r&,col_g&,col_b&)
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE save_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette_save%>0 AND _B=8
    V~H=-1
    FOR tmp_c&=0 TO 255
      ~VQ_COLOR(tmp_c&,0,col_r&,col_g&,col_b&)
      tmp_d&=MUL(tmp_c&,6)
      INT{ADD(palette_save%,tmp_d&)}=col_r&
      INT{ADD(palette_save%,ADD(tmp_d&,2))}=col_g&
      INT{ADD(palette_save%,ADD(tmp_d&,4))}=col_b&
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE set_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette_work%>0 AND _B>=8
    '
    V~H=-1
    FOR tmp_c&=0 TO 255
      tmp_d&=MUL(tmp_c&,6)
      col_r&=INT{ADD(palette_work%,tmp_d&)}
      col_g&=INT{ADD(palette_work%,ADD(tmp_d&,2))}
      col_b&=INT{ADD(palette_work%,ADD(tmp_d&,4))}
      ~VS_COLOR(tmp_c&,col_r&,col_g&,col_b&)
    NEXT tmp_c&
    '
    V~H=off_handle&
    FOR tmp_c&=0 TO 255
      tmp_d&=MUL(tmp_c&,6)
      col_r&=INT{ADD(palette_work%,tmp_d&)}
      col_g&=INT{ADD(palette_work%,ADD(tmp_d&,2))}
      col_b&=INT{ADD(palette_work%,ADD(tmp_d&,4))}
      ~VS_COLOR(tmp_c&,col_r&,col_g&,col_b&)
    NEXT tmp_c&
    '
  ENDIF
RETURN
'
> PROCEDURE mouse_busy
  ~GRAF_MOUSE(2,0)
RETURN
> PROCEDURE mouse_free
  ~GRAF_MOUSE(0,0)
RETURN
'
> PROCEDURE sprite_put(pspr_id&,pimg_x&,pimg_y&)
  LOCAL opx&,opy&,opdx&,opdy&,opw&,oph&
  '
  IF pspr_id&>0
    '
    opx&=ADD(pimg_x&,img_x&(pspr_id&))
    opy&=ADD(pimg_y&,img_y&(pspr_id&))
    opdx&=0
    opdy&=0
    opw&=img_w&(pspr_id&)
    oph&=img_h&(pspr_id&)
    '
    IF opx&<0
      ADD opw&,opx&
      opdx&=ABS(opx&)
      opx&=0
    ENDIF
    IF ADD(opx&,opw&)>img_w&(1)
      opw&=SUB(img_w&(1),opx&)
    ELSE IF ADD(opx&,opw&)<0
      opw&=0
    ENDIF
    IF opy&<0
      ADD oph&,opy&
      opdy&=ABS(opy&)
      opy&=0
    ENDIF
    IF ADD(opy&,oph&)>img_h&(1)
      oph&=SUB(img_h&(1),opy&)
    ELSE IF ADD(opy&,oph&)<0
      oph&=0
    ENDIF
    '
    opw&=MIN(opw&,img_w&(1))
    oph&=MIN(oph&,img_h&(1))
    '
    IF opw&>0 AND oph&>0
      '
      SET.SXYWH opdx&,opdy&,opw&,oph&
      SET.DXYWH opx&,opy&,opw&,oph&
      '
      ~VRT_CPYFM(raster_mask_mode&,img_mfdb%(SUCC(pspr_id&)),off_mfdb%,raster_mask_color_0&,raster_mask_color_1&)
      ~VRO_CPYFM(raster_sprite_mode&,img_mfdb%(pspr_id&),off_mfdb%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE image_put(pspr_id&,pimg_x&,pimg_y&)
  LOCAL opx&,opy&,opdx&,opdy&,opw&,oph&
  '
  IF pspr_id&>0
    '
    opx&=SUB(pimg_x&,img_x&(pspr_id&))
    opy&=SUB(pimg_y&,img_y&(pspr_id&))
    opdx&=0
    opdy&=0
    opw&=img_w&(pspr_id&)
    oph&=img_h&(pspr_id&)
    '
    IF opx&<0
      ADD opw&,opx&
      opdx&=ABS(opx&)
      opx&=0
    ENDIF
    IF ADD(opx&,opw&)>img_w&(1)
      opw&=SUB(img_w&(1),opx&)
    ELSE IF ADD(opx&,opw&)<0
      opw&=0
    ENDIF
    IF opy&<0
      ADD oph&,opy&
      opdy&=ABS(opy&)
      opy&=0
    ENDIF
    IF ADD(opy&,oph&)>img_h&(1)
      oph&=SUB(img_h&(1),opy&)
    ELSE IF ADD(opy&,oph&)<0
      oph&=0
    ENDIF
    '
    opw&=MIN(opw&,img_w&(1))
    oph&=MIN(oph&,img_h&(1))
    '
    IF opw&>0 AND oph&>0
      '
      SET.SXYWH opdx&,opdy&,opw&,oph&
      SET.DXYWH opx&,opy&,opw&,oph&
      '
      ~VRO_CPYFM(3,img_mfdb%(pspr_id&),off_mfdb%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE screen_display
  SET.SXYWH 0,0,img_w&(1),img_h&(1)
  SET.DXYWH img_x&(0),img_y&(0),img_w&(1),img_h&(1)
  ~VRO_CPYFM(3,off_mfdb%,scr_mfdb%)
RETURN
> FUNCTION trns_pix(trns_r|,trns_g|,trns_b|)
  $F%
  LOCAL trns_r$,trns_g$,trns_b$,trns_dummy$
  ~FRE()
  ~FRE(0)
  '
  trns_dummy$=STRING$(bitplane_number&,"0")
  '
  trns_r$=LEFT$(BIN$(trns_r|,8),nb_bit_r|)
  FOR trns_i|=1 TO nb_bit_r|
    MID$(trns_dummy$,bitorg_r|(trns_i|))=MID$(trns_r$,SUB(SUCC(nb_bit_r|),trns_i|),1)
  NEXT trns_i|
  '
  trns_g$=LEFT$(BIN$(trns_g|,8),nb_bit_g|)
  FOR trns_i|=1 TO nb_bit_g|
    MID$(trns_dummy$,bitorg_g|(trns_i|))=MID$(trns_g$,SUB(SUCC(nb_bit_g|),trns_i|),1)
  NEXT trns_i|
  '
  trns_b$=LEFT$(BIN$(trns_b|,8),nb_bit_b|)
  FOR trns_i|=1 TO nb_bit_b|
    MID$(trns_dummy$,bitorg_b|(trns_i|))=MID$(trns_b$,SUB(SUCC(nb_bit_b|),trns_i|),1)
  NEXT trns_i|
  '
  RETURN VAL("&X"+trns_dummy$)
ENDFUNC
'
> PROCEDURE rnd_init
  LOCAL rnd_ptr%,rnd_end%
  '
  @mxfree(rnd_mem%)
  '
  rnd_mem%=MAX(0,@mxalloc(256,3))
  IF rnd_mem%>0
    '
    rnd_ptr%=rnd_mem%
    rnd_end%=ADD(rnd_mem%,256)
    WHILE rnd_ptr%<rnd_end%
      BYTE{rnd_ptr%}=MAX(0,MIN(RAND(256) AND &HFF,255))
      INC rnd_ptr%
    WEND
    '
    rnd_deb|=0
  ENDIF
RETURN
> PROCEDURE rnd_exit
  @mxfree(rnd_mem%)
RETURN
> FUNCTION rnd_get(rnd_max&)
  $F%
  LOCAL rnd_val|
  '
  IF rnd_mem%>0
    INC rnd_deb|
    IF rnd_deb|>255
      rnd_deb|=0
    ENDIF
    rnd_val|=BYTE{ADD(rnd_mem%,rnd_deb|)}
    rnd_val|=BYTE{ADD(rnd_mem%,rnd_val|)}
    rnd_val|=BYTE{ADD(rnd_mem%,rnd_val|)}
  ELSE
    rnd_val|=MAX(0,MIN(RAND(256) AND &HFF,255))
  ENDIF
  '
  RETURN SHR(MUL(rnd_max&,rnd_val|),8)
ENDFUNC
'
> PROCEDURE v_hide_c
  IF naes!
    GHIDEM
  ELSE
    ~V_HIDE_C()
  ENDIF
RETURN
> PROCEDURE v_show_c
  IF naes!
    GSHOWM
  ELSE
    ~V_SHOW_C()
  ENDIF
RETURN
'
> FUNCTION mx_mask
  $F%
  IF MXALLOC(-1,0)=-32
    RETURN 0
  ELSE IF SYSCONF(-1)=-32
    RETURN 3
  ELSE
    RETURN -1
  ENDIF
ENDFUNC
> FUNCTION mxalloc(mxlen%,mxmode&)
  $F%
  IF mxalloc!
    RETURN MXALLOC(mxlen%,mxmode&)
  ENDIF
  RETURN MALLOC(mxlen%)
ENDFUNC
> PROCEDURE mxfree(mx_adr%)
  IF mx_adr%>0
    ~MFREE(mx_adr%)
  ENDIF
RETURN
'
> PROCEDURE gxalloc_main_init(gx_n&)
  LOCAL gx_i&
  '
  gxblk_max&=128
  '
  DIM gxblk%(gx_n&,PRED(gxblk_max&))
  DIM gxblk_count&(gx_n&),gxblk_mode&(gx_n&)
  DIM last_gxadr%(gx_n&),last_gxlen%(gx_n&)
  DIM gxalloc!(gx_n&),gxblk_size%(gx_n&),gxblk_len%(gx_n&,PRED(gxblk_max&))
  '
  FOR gx_i&=0 TO gx_n&
    gxblk_size%(gx_i&)=16000
    gxblk_mode&(gx_i&)=0
  NEXT gx_i&
  '
RETURN
> PROCEDURE gxalloc_main_exit(gx_n&)
  LOCAL gx_i&
  '
  FOR gx_i&=0 TO gx_n&
    ~@gxalloc_exit(gx_i&)
  NEXT gx_i&
  '
  ERASE gxblk%()
  ERASE gxblk_count&()
  ERASE last_gxadr%(),last_gxlen%()
  ERASE gxalloc!(),gxblk_size%(),gxblk_len%()
  ERASE garbage%()
  ERASE garbage%(),garbage_maxline&(),garbage_nbline&()
  '
RETURN
> FUNCTION gxalloc_init(gx_n&)
  $F%
  LOCAL ig&
  ~FRE(0)
  '
  IF NOT gxalloc!(gx_n&)
    FOR ig&=0 TO PRED(gxblk_max&)
      gxblk%(gx_n&,ig&)=0
    NEXT ig&
    '
    SELECT gx_n&
    CASE 1 ! gfx
      gxblk_size%(1)=24000*_B
      gxblk_mode&(1)=3 ! TT-RAM preferred
    ENDSELECT
    '
    gxblk_count&(gx_n&)=0
    last_gxadr%(gx_n&)=0
    last_gxlen%(gx_n&)=0
    '
    gxblk%(gx_n&,0)=@mxalloc(ADD(gxblk_size%(gx_n&),32),gxblk_mode&(gx_n&))
    IF gxblk%(gx_n&,0)>0
      last_gxadr%(gx_n&)=gxblk%(gx_n&,0)
      last_gxlen%(gx_n&)=gxblk_size%(gx_n&)
      gxalloc!(gx_n&)=TRUE
      RETURN 0
    ENDIF
    RETURN gxblk%(gx_n&,0)
  ENDIF
  RETURN -1
ENDFUNC
> FUNCTION gxalloc_exit(gx_n&)
  $F%
  LOCAL ig&,free%
  '
  IF gx_n&=1
    job_list_adr%=0
    console_header_adr%=0
    console_nb_line&=0
  ENDIF
  '
  IF gxalloc!(gx_n&)
    gxalloc!(gx_n&)=FALSE
    FOR ig&=0 TO gxblk_count&(gx_n&)
      IF gxblk%(gx_n&,ig&)>0
        @mxfree(gxblk%(gx_n&,ig&))
        free%=0
        gxblk_len%(gx_n&,ig&)=0
        gxblk%(gx_n&,ig&)=0
        IF free%<>0
          ~FORM_ALERT(1,"[1][ gxalloc: can't free memory block ][ Ok ]")
        ENDIF
      ENDIF
    NEXT ig&
    RETURN 0
  ENDIF
  RETURN -1
ENDFUNC
> FUNCTION gxalloc(gx_n&,wanted_size%)
  $F%
  '
  wanted_size%=ADD(wanted_size%,3) AND -4
  wanted_size%=MAX(4,wanted_size%)
  '
  IF wanted_size%>0
    IF wanted_size%=<gxblk_size%(gx_n&)
      IF SUB(last_gxlen%(gx_n&),wanted_size%)<0
        @gxalloc_shrink(gx_n&,last_gxlen%(gx_n&))
        temp_adr%=@gxalloc_new(gx_n&)
        IF temp_adr%=0
          new_gxadr%=last_gxadr%(gx_n&)
          ADD last_gxadr%(gx_n&),wanted_size%
          SUB last_gxlen%(gx_n&),wanted_size%
          RETURN new_gxadr%
        ENDIF
        RETURN temp_adr%
      ELSE
        new_gxadr%=last_gxadr%(gx_n&)
        ADD last_gxadr%(gx_n&),wanted_size%
        SUB last_gxlen%(gx_n&),wanted_size%
        RETURN new_gxadr%
      ENDIF
    ENDIF
  ENDIF
  ~FORM_ALERT(1,"[1][ gxalloc: negative or oversize| length for a memory block ][ Ok ]")
  RETURN -70
ENDFUNC
> FUNCTION gxalloc_new(gx_n&)
  $F%
  INC gxblk_count&(gx_n&)
  IF gxblk_count&(gx_n&)<gxblk_max&
    gxblk%(gx_n&,gxblk_count&(gx_n&))=@mxalloc(ADD(gxblk_size%(gx_n&),32),gxblk_mode&(gx_n&))
    IF gxblk%(gx_n&,gxblk_count&(gx_n&))>0
      last_gxadr%(gx_n&)=gxblk%(gx_n&,gxblk_count&(gx_n&))
      last_gxlen%(gx_n&)=gxblk_size%(gx_n&)
      RETURN 0
    ELSE
      ~FORM_ALERT(1,"[1][ gxalloc: can't allocate a memory block ][ Ok ]")
    ENDIF
    DEC gxblk_count&(gx_n&)
    RETURN gxblk%(gx_n&,SUCC(gxblk_count&(gx_n&)))
  ENDIF
  ~FORM_ALERT(1,"[1][| gxalloc: all available blocks are allocated ][ Ok ]")
  RETURN -74
ENDFUNC
> PROCEDURE gxalloc_shrink(gx_n&,free_size%)
  IF free_size%>4
    gxblk_len%(gx_n&,gxblk_count&(gx_n&))=SUB(gxblk_size%(gx_n&),SUB(free_size%,4))
    last_gxlen%(gx_n&)=0
    ~GEMDOS(74,W:0,L:gxblk%(gx_n&,gxblk_count&(gx_n&)),L:gxblk_len%(gx_n&,gxblk_count&(gx_n&)))
  ENDIF
RETURN
> FUNCTION gxalloc_get_total(gx_n&)
  $F%
  LOCAL gx_amount%,gx_j&
  '
  gx_amount%=0
  FOR gx_j&=0 TO gxblk_count&(gx_n&)
    IF gxblk_len%(gx_n&,gx_j&)=0
      ADD gx_amount%,gxblk_size%(gx_n&)
    ELSE
      ADD gx_amount%,gxblk_len%(gx_n&,gx_j&)
    ENDIF
  NEXT gx_j&
  '
  RETURN gx_amount%
ENDFUNC
