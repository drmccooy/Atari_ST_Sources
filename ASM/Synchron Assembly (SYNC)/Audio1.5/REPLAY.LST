'
' Audio Sculpture Replay Routines
' Dedicated to Johanna!
' Copyright 1991 Synchron Assembly and Expose Software
'
' These sources may be freely used in any software, private or commercial,
' if it is announced that the routines come from Audio Sculpture...
'
' ***************************************************************************
' * IMPORTANT!!!                                                            *
' *                                                                         *
' * When you use this routine make sure that the module you are about       *
' * to play is saved in Audio Sculpture with the PACK option set to OFF!    *
' * If this is not the case this routine will CRASH!!!                      *
' * The files on the AudioSculpture DataDisk are packed and should          *
' * therefore be loaded into AudioSculpture and saved to another disk with  *
' * pack option off!                                                        *
' ***************************************************************************
'
RESERVE 100000
a%=MALLOC(100000)
FILESELECT "","",mname$                          ! Name of module to load...
IF EXIST(mname$)
  IF a%>0
    BLOAD "e:\a_s\replay\cyber.b",a%                    ! Load the replay routine
    prg_base%=a%+28
    '
    ' Load the desired module!
    '
    OPEN "i",#1,mname$                    ! Find length of Module
    len%=LOF(#1)
    CLOSE #1
    '
    b%=MALLOC(len%)                       ! Request Memory
    '
    IF b%>0
      BLOAD mname$,b%
      '
      {prg_base%+20}=b%       ! Pointer to Start of Module
      {prg_base%+24}=b%+len%  ! Pointer to End of Module
      '
      POKE prg_base%+37,8     ! Output Mode Selector
      '   0 Internal sound
      '   1 ST Replay Mono
      '   2 Centronics Mono
      '   3 Stereo Internal/Replay
      '   4 Stereo Internal/Centronics
      '   5 Stereo Replay/Centronics
      '   6 Replay Stereo
      '   7 Replay Professional
      '   8 STE with full frequency control
      '   9 STE with quantized frequencies
      '  10 STE extended to 16-bits
      '
      '
      POKE prg_base%+38,1     ! Volume Control, 0=Off, 1=On
      POKE prg_base%+39,2     ! STE frequency (0=6.25kHz/1=12.5kHz/2=25kHz/3=50kHz)
      POKE prg_base%+40,49    ! Interrupt Frequency = 614400 divided by this value
      POKE prg_base%+41,0     ! Oversample, 0=Off, 1=On, only output mode 8
      '
      ' Find The Number of samples used and request additional memory needed...
      '
      BYTE{prg_base%+96}=0               ! A new module is about to be used...
      CALL prg_base%                     ! Relocate Code and find amount of memory needed
      topmem%={prg_base%+28}             ! Pointer to end of bss of the replay routine...
      c%={prg_base%+32}                  ! Number of bytes needed just after the module...
      c%=MALLOC(c%)                      ! Request Memory
      IF c%>0
        '
        ON BREAK GOSUB exit
        '
        REPEAT
          restart
          '
          REPEAT
            OUT 4,18                      ! Turn off mouse to stop interrupt interference
            '
            ' Start singing!
            z%=prg_base%+12
            CALL z%
            '
            z%=RANDOM(100)
            IF ODD(z%)
              roonken1
            ELSE
              roonken2
            ENDIF
            ~INP(2)
            '
            z%=prg_base%+16               ! Stop now!
            CALL z%
            '
            OUT 4,8                       ! Turn On Mouse
            ALERT 1,"Choose Option:",3,"RESTART|CONTINUE| STOP ",r%
          UNTIL r%<>2
        UNTIL r%=3
        '
        '
        ' The end of it all!
        '
        ~MFREE(c%)                        ! Release After Module Memory
      ENDIF
      ~MFREE(b%)                          ! Release Module Memory
    ENDIF
    ~MFREE(a%)                            ! Release Replay Code Memory
  ENDIF
ENDIF
EDIT
'
> PROCEDURE restart
  {prg_base%+86}=0
  WORD{prg_base%+90}=0
RETURN
> PROCEDURE exit
  z%=prg_base%+16
  CALL z%
  ~MFREE(c%)
  ~MFREE(b%)
  ~MFREE(a%)
  OUT 4,8
RETURN
> PROCEDURE roonken1
  CLS
  GRAPHMODE 3
  n%=32
  ERASE x1%(),y1%(),x2%(),y2%()
  DIM x1%(n%),y1%(n%),x2%(n%),y2%(n%)
  w%=640+320*(XBIOS(4)=0)
  h%=200-200*(XBIOS(4)=2)
  dx1%=8
  dy1%=8
  dx2%=8
  dy2%=8
  CLR i%
  REPEAT
    ELLIPSE x1%(i%),y1%(i%),x2%(i%),y2%(i%)
    '
    ADD x1%,dx1%
    ADD y1%,dy1%
    ADD x2%,dx2%
    ADD y2%,dy2%
    '
    IF x1%<0
      dx1%=4+RANDOM(8)
    ELSE IF x1%>w%
      dx1%=-4-RANDOM(8)
    ENDIF
    '
    IF x2%<0
      dx2%=4+RANDOM(8)
    ELSE IF x2%>w%
      dx2%=-4-RANDOM(8)
    ENDIF
    '
    IF y1%<0
      dy1%=4+RANDOM(8)
    ELSE IF y1%>h%
      dy1%=-4-RANDOM(8)
    ENDIF
    '
    IF y2%<0
      dy2%=4+RANDOM(8)
    ELSE IF y2%>h%
      dy2%=-4-RANDOM(8)
    ENDIF
    '
    x1%(i%)=x1%
    y1%(i%)=y1%
    x2%(i%)=x2%
    y2%(i%)=y2%
    ELLIPSE x1%,y1%,x2%,y2%
    i%=SUCC(i%) MOD n%
  UNTIL INP?(2)
RETURN
> PROCEDURE roonken2
  CLS
  GRAPHMODE 3
  n%=32
  ERASE x1%(),y1%(),x2%(),y2%()
  DIM x1%(n%),y1%(n%),x2%(n%),y2%(n%)
  w%=640+320*(XBIOS(4)=0)
  h%=200-200*(XBIOS(4)=2)
  dx1%=8
  dy1%=8
  dx2%=8
  dy2%=8
  CLR i%
  REPEAT
    LINE x1%(i%),y1%(i%),x2%(i%),y2%(i%)
    '
    ADD x1%,dx1%
    ADD y1%,dy1%
    ADD x2%,dx2%
    ADD y2%,dy2%
    '
    IF x1%<0
      dx1%=4+RANDOM(8)
    ELSE IF x1%>w%
      dx1%=-4-RANDOM(8)
    ENDIF
    '
    IF x2%<0
      dx2%=4+RANDOM(8)
    ELSE IF x2%>w%
      dx2%=-4-RANDOM(8)
    ENDIF
    '
    IF y1%<0
      dy1%=4+RANDOM(8)
    ELSE IF y1%>h%
      dy1%=-4-RANDOM(8)
    ENDIF
    '
    IF y2%<0
      dy2%=4+RANDOM(8)
    ELSE IF y2%>h%
      dy2%=-4-RANDOM(8)
    ENDIF
    '
    x1%(i%)=x1%
    y1%(i%)=y1%
    x2%(i%)=x2%
    y2%(i%)=y2%
    LINE x1%,y1%,x2%,y2%
    i%=SUCC(i%) MOD n%
  UNTIL INP?(2)
RETURN
