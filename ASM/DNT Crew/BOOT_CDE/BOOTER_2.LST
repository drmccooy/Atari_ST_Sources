' Ce programme peut g‚rer 3 types de boot-sector:
'
'   o Les boots normaux, de 480 octets ou moins (option [Normal])
'
'   o Les boots ‚tendus, qui peuvent faire jusqu'… 488 octets.Le programme doit
'     avoir un format sp‚cial:
'                8 octets d'instructions diverses
'                bra.s    suite
'                dcb.b    22,$55
'         suite: 480 octets de programme maximum
'
'   o Les boots [Non-TOS] pour lesquels vous avez droit … 510 octets de programme
'     au lieu des 480 habituels, mais sans contraintes de format.
'
' Les boots doivent ˆtre assembl‚s (avec ou sans les labels, ils ne seront de
' toutes fa‡ons pas pr‚sent dans le boot-sector) normalement, avec la variable
' TEST equ 0  , sur disque(ette).Le fichier .PRG obtenu est alors utilis‚ par
' ce programme.C'est tout.
'
' Attention: il utilise les routines du XBIOS pour lire et ‚crire les boots,
' donc ce n'est pas un anti-virus (qui comme chacun sait, doit avoir ses propres
' routines de lecteur de disquette s'il ne veut pas se faire brouiller par le
' virus...je dis ‡a au passage...hum...au cas o— ‡a pourrait donner des id‚es d'
' am‚liorations … certains anti-virus...)
' A ce propos: ne faites pas d'anti-virus en boot, vous savez ces machins qui se
' reproduisent comme les virus et sont aussi chiants ?.Et surtout ne faites
' JAMAIS de boot qui essaye de d‚tecter des virus.Sauf … detecter UN virus bien
' particulier, c'est l… aussi stupide.J'en ai marre de voir des utilitaires
' r‚sidents se faire exploser froidement … cause d'une andouille qui les confond
' avec un virus !!.Si je te tenais, Altair, je te ferais manger ton TDT Alta‹r
' antivirus..Bon d'accord, c'‚tait un bug de ta part, mais si tu savais le
' nombre de boots parasit‚s, et le nombre de resets intempestifs que j'ai eu...
'
buf$=SPACE$(800)
buf%=VARPTR(buf$)
sect$=SPACE$(512)
sect%=VARPTR(sect$)
CLS
PRINT "       Installation d'un fichier au format .PRG/.TOS sur le Boot-sector"
PRINT "                        (C)oderight NULLOS//DNT 91-92"
DO
  ALERT 1,"Quel type de boot-sector|doit-on installer ?",1,"Normal|Sp‚cial",format%
  IF format%=2
    ALERT 1,"Est-ce un boot-sector|‚tendu ou non-TOS ?",1,"Etendu|Non-TOS",format%
    INC format%
  ENDIF
  SELECT format%            !selon le format choisi,taille maximale possible
  CASE 1
    long_max%=480
  CASE 2,3
    long_max%=510
  ENDSELECT
  FILESELECT "\*.*","",nom$
  IF nom$=""
    END
  ENDIF
  IF EXIST(nom$)
    BLOAD nom$,buf%
    IF DPEEK(buf%)<>&H601A                   !Petite v‚rification...
      ALERT 3,"Le fichier n'est pas au|format du TOS",1," ARG ",d%
      GOTO fin
    ENDIF                                    !Taille du programme:
    long%=LPEEK(buf%+2)+LPEEK(buf%+6)        !(SECTION TEXT)+(SECTION DATA)
    IF long%>long_max% OR LPEEK(buf%+10)<>0  !trop gros, ou alors y'a des BSS!!
      ALERT 2,"Fichier trop grand...",1,"Argh",d%
    ELSE
      REPEAT
        ALERT 3,"Ins‚rez une disquette …| bidouiller dans|le lecteur A..",1,"OUI|NON",rep%
        IF rep%=1
          er%=XBIOS(8,L:sect%,L:0,0,1,0,0,1)
          IF er%<>0
            ALERT 3,"Erreur a la lecture |du Boot-sector",1," STOP ",d%
          ELSE
            IF PEEK(sect%)=&H60              !Instruction de branchement ?
              ALERT 2,"Le Boot est sans doute|d‚j… occup‚|Que fait-on ?",1,"STOP|CONT",d%
              IF d%=1
                GOTO fin
              ENDIF
            ENDIF
            SELECT format%
            CASE 1
              BMOVE buf%+&H1C,sect%+30,long%      !Executable … partir du 30Šme
              FOR i%=sect%+30+long% TO sect%+511  !octet.
                POKE i%,0                         !Efface le reste.
              NEXT i%                             !
              DPOKE sect%,&H601C                  !Branchement vers le code
            CASE 2,3                              !
              IF format%=2                        !Format ‚tendu
                BMOVE buf%+&H1C,sect%,10          !10 premiers octets de code
                BMOVE buf%+&H1C+30,sect%+30,long%-30 !plus le reste
              ELSE                                !
                BMOVE buf%+&H1C,sect%,long%       !Non-TOS:tout le boot !
              ENDIF                               !
              FOR i%=sect%+long% TO sect%+511     !efface la fin du boot
                POKE i%,0                         !
              NEXT i%                             !
            ENDSELECT                             !Puis appel … Protobt=XBIOS(18)
            VOID XBIOS(18,L:sect%,L:-1,-1,1)      !pour calculer le Checksum
            VOID XBIOS(9,L:sect%,L:0,0,1,0,0,1)   !‚crire le r‚sultat
          ENDIF
        ENDIF
      UNTIL rep%=2
    ENDIF
  ENDIF
fin:
LOOP
