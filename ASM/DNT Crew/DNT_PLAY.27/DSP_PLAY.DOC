*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷*
*                            DSP SoundTracking                            *
*                    (C)oderight Nullos / DNT-Crew 1994                   *
*'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'*
*Ceci est un programme freeware, MAIS ce n'est pas du domaine public.     *
*Si vous utilisez tout ou partie de ce source ou d'un autre source formant*
*ma routine de soundtracker au DSP, dans un but non-lucratif, n'oubliez   *
*pas de me le signaler.                                                   *
*Si par contre il s'agit d'une utilisation dans le cadre d'un programme   *
*commercial, il faudra demander mon autorisation, certes par simple       *
*formalit‚ mais quand mˆme...                                             *
*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷ Version 2.7 ÷÷÷÷÷*




O. Contenu du dossier
=====================
       DSP_PLAY.DOC : La pr‚sente documentation
       DSP_PLAY.INC : D‚finition des variables du player
       DSP_PLAY.S   : Source 68030 du player de modules
       DSP_PLAY.BIN : Player de module prˆt … l'emploi
       DSPMIX_0.ASM : Source DSP du mixeur (sans balances ni interpolation)
       DSPMIX_0.P56 : 
       DSPMIX_1.ASM : Le mˆme, mais avec les balances
       DSPMIX_1.P56 : 
       DSPMIX_2.ASM : Avec les balances et l'interpolation lin‚aire 50Khz
       DSPMIX_2.P56 : 
       DSPMIX_A.ASM : Partie commune aux trois pr‚cedents sources (Init)
       DSPMIX_B.ASM : ------ ------- --- ----- ---------- ------- (Gestion)
       DSPMIX_C.ASM : ------ ------- --- ----- ---------- ------- (Variables)
       MOD_NTK4.S   : Source du convertisseur de module (la moulinette!)
       MOD_NTK4.PRG : Le mˆme, mais prˆt … l'emploi
       DSP_EXEM.S   : Un exemple d'utilisation
       MINIPLAY.S   : Presque le mˆme, mais totalement autonome
       MINIPLAY.TTP : Sa version prˆte … l'emploi (cf plus loin)
       TEST.ASM     : Compl‚ment de l'exemple
       TEST.P56     :
       CHIPMUN2.MOD : Un mini-module, retravaill‚ par Biro (merci … lui)
       \ASM2P56\    : Dossier contenant un utilitaire pour convertir en une
                      seule passe un fichier source DSP en fichier binaire
                      P56, en utilisant ASM56000 et CLD2LOD. Cf le source
                      pour s'en servir.
       \INCLUDE\HARD_SYS.S   : D‚finitions diverses
               \TOS_030.S    : Ensemble de macro d'accŠs au TOS 4.0
               \READWRIT.ASM : Macros de communication pour le DSP
               \INTEQU.ASM   : D‚finitions des interruptions DSP
               \IOEQU.ASM    : D‚finitions des registres p‚riph‚riques du DSP


    ------------------------------------------------------------------------
       Les fichiers pr‚sents dans ce dossier (sauf CHIPMUN2.MOD, le dossier
    ASM2P56 au complet, et tout ou partie du dossier INCLUDE) ne doivent pas
    ˆtre diffus‚s s‚par‚ment, mais tous ensembles.
    ------------------------------------------------------------------------


I. Mais qu'est-ce donc ?
========================
       Bonne question, en effet. PremiŠre remarque: si vous n'ˆtes pas un
    programmeur, passez votre chemin!. Cet ensemble de routines leur est en
    effet destin‚, ce qui est normal vu que ce sont des routines (tout le
    monde suit bien, l…? non parce que j'ai du mal … d‚marrer cette doc,
    alors je meuble). Seul le programme MINIPLAY.TTP peut vous ˆtre utile
    pour ‚couter vos modules avec une qualit‚ sonore maximale.
       Il s'agit d'un package pour pouvoir se servir de la puissance du DSP
    pour avoir une musique soundtracker (les fameux fichiers *.MOD), sans
    le monopoliser bˆtement et donc en ayant la possibilit‚ de faire ce que
    l'on veut en mˆme temps. Vous disposerez alors d'un son de qualit‚, pour
    accompagner vos d‚lires de programmation DSP.


II. Informations
================
       Ce package permet de restituer des modules soundtracker avec entre
    autres l'utilisation de balances. Evidemment, rien n'est pr‚vu dans le
    format *.MOD de base pour g‚rer cette possibilit‚. Cependant, j'ai pris
    la libert‚ de d‚tourner la commande F du groupe E (ou la commande EF, si
    vous pr‚f‚rez). C'est normalement l'effet "Funk It" (heu, ou un nom de
    ce style) que je n'ai jamais vu employ‚. Il a donc ‚t‚ remplac‚ par la
    gestion des balances. Dans le paramŠtre entre 0 et F de cette commande,
    vous pourrez donc indiquer la position entre gauche et droite de la
    voix concern‚e. Parlez-en … votre musicien favori !!

       La premiŠre version de cet ensemble de routines a ‚t‚ distribu‚ en
    accompagnement d'une s‚rie de trois articles consacr‚s … la programmation
    du DSP56001, dans le DNT-Paper 7. Plus pr‚cis‚ment, le troisiŠme article,
    aprŠs une pr‚sentation des particularit‚s du DSP et de ses moyens de
    communiquer avec le monde ext‚rieur, se proposait de d‚cortiquer la
    cr‚ation d'une routine de mixage soundtracker.
       Si vous voulez donc avoir des informations sur le pourquoi du comment
    de ces routines, sur les m‚thodes utilis‚es pour arriver au bon r‚sultat,
    il vous suffira de vous reporter … ce num‚ro du DNT-Paper 7. N'oubliez
    pas cependant que certaines routines ont ‚volu‚es entre temps, mais les
    indications donn‚es restent globalement correctes.


III. Ca marche!
===============
       Oui, mais … condition de savoir s'en servir... Tout d'abord, les sources
    68030 et DSP56001 ont ‚t‚ cr‚es pour ˆtre assembl‚s respectivement avec
    Devpac 3 et ASM56000. Pour vous servir d'un autre couple d'assembleurs,
    certaines modifications seront sans doute n‚cessaire (surtout pour les
    sources DSP, car ils utilisent les facilit‚s propres … ASM56000).

       Tout d'abord, selon vos besoin (qualit‚ sonore ou rapidit‚), plusieurs
    m‚thodes de mixage vous sont fournies. Ceci concerne donc les sources DSP,
    la partie 68030 ne faisant que de la gestion de partition et ne d‚pendant
    pas du mode de restitution choisi.
       Ensuite, un source 68030 (unique, donc), appel‚ DSP_PLAY.S, contient
    toute la gestion du soundtracker et la communication avec le module DSP.
    C'est lui qui, une fois assembl‚e, donnera naissance … la routine
    DSP_PLAY.BIN contenant le r‚sultat des deux assemblages. C'est cette
    routine que votre programme utilisera pour faire exploser les oreilles
    de vos voisins.
       Un exemple de programme se servant des routines soundtracker est
    fourni, il s'agit du source et du programme DSP_EXEM. Il ne fait que
    visualiser le temps machine occup‚ par la routine du cot‚ 68030, et
    bien s–r rejoue un module en mˆme temps. Un autre, plus complet, se
    nomme MINIPLAY et vous donne un exemple d'utilisation de toutes les
    routines mises … votre disposition, sous forme d'un player de *.MOD
    autonome … installer sur le bureau.


IV. Pr‚liminaires
=================
       Pour en arriver l…, il faut pr‚-traiter les modules Amiga originaux
    (les fameux *.MOD) … l'aide d'une moulinette afin de modifier leur
    format (qui est … l'origine trŠs archa‹que et bord‚lique, et donc peu
    adapt‚ … une utilisation rapide). Cette moulinette se nomme MOD_NTK.PRG,
    et son fonctionnement est trŠs simple.
       AprŠs l'avoir lanc‚, une ligne de texte vous invite … rentrer le nom
    du module original que vous souhaitez rejouer (par exemple, CHIPMUN2.MOD
    fourni dans ce dossier). Puis, aprŠs avoir v‚rifi‚ que ce module existe
    bien, il vous demandera de rentrer le nom du fichier cr‚‚. Je vous
    conseille d'utiliser le mˆme nom, suivi de l'extension NTK (et donc dans
    ce cas CHIPMUN2.NTK).
       Une fois ceci fait, la moulinette se met en marche, en vous informant
    au fur et … mesure de l'avanc‚e du travail. Une fois ceci termin‚, vous
    aurez droit … une page d'information vous renseignant sur le contenu du
    module trait‚ (plus pr‚cis‚ment, une comptabilit‚ de tous les effets
    utilis‚s dans la partition).

       J'allais presque oublier que pour ne pas avoir … passer votre module …
    la moulinette (pour le faire utiliser par le player), vous avez la pos-
    sibilit‚ d'inclure son source (MOD_NTK4.S) dans votre propre programme.
    Vous pourrez alors faire appel … sa principale fonction qui se nomme
    convert_mod_to_ntk et qui re‡oit en A0 l'adresse d'un buffer qui contient
    votre module dans le format MOD habituel, plus 64Ko de m‚moire libre
    derriŠre, et en D0 la taille de ce module. Elle vous renvoie dans ce
    mˆme buffer le module converti. En prime, vous recevrez en D0 la taille
    prise par ce dernier.
       Pour utiliser cette moulinette portative (si on peut dire), il vous
    suffira donc de mettre au choix les lignes suivantes dans votre propre
    source:

    NOPROGRAM include "MOD_NTK4.S"  ;Pour Devpac
    
    ou bien

    NOPROGRAM equ 0                 ;Pour d'autre assembleurs moins
              include "MOD_NTK4.S"  ;coop‚ratifs.
    
       Le r“le du label NOPROGRAM est d'indiquer … MOD_NTK4.S que vous ne
    voulez que de la routine de conversion, et rien d'autre. Une petite
    remarque: cette routine a besoin d'un buffer rallong‚ de 64 Ko (65536
    octets, pas 64000!) pour contenir le pire des cas (qui ne surviendra
    jamais: 31 instruments ayant tous une boucle de repeat qui fait de 670
    octets, c'est rare!). Vous pouvez donc, en fonction de la vraie taille
    du module NTK retourn‚e en D0, lib‚rer de la place … la fin de votre
    buffer.
       Un exemple d'utilisation de cette m‚thode est donn‚ dans le source
    MINIPLAY.S (reportez-vous au paragraphe le concernant).
       


V. Assemblage
=============
       Maintenant, il vous faut choisir le mode de restitution pour g‚n‚rer
    la routine DSP_PLAY.BIN correspondante. Pour ceci, il vous faudra re-
    assembler le fichier DSP_PLAY.S en modifiant la variable TYPE_MIX. Selon
    la valeur que vous allez lui attribuer, vous aurez alors droit …:

       TYPE_MIX equ 0 : Routine sans balance sonore, ni interpolation de la
                        courbe sonore, mais trŠs rapide (10% du temps machine
                        DSP environ, tout compris)

       TYPE_MIX equ 1 : Routine avec balance sonore, mais sans interpolation
                        de la courbe sonore, moyennement rapide (16% du temps
                        machine DSP)

       TYPE_MIX equ 2 : Routine avec balance sonore et interpolation lin‚aire
                        50 Khz de la courbe sonore, moyennement lente (20% du
                        temps machine DSP), qualit‚ sonore top-moumoute

       Comme vous pouvez le constater, la diff‚rence ne concerne que le DSP,
    le 68030 n'est pas concern‚ par ces changements.

       Une fois votre choix fait, un petit coup d'assemblage avec Devpac 3,
    et c'est parti!. ATTENTION: ce source contient du code 68030, ce qui
    pose problŠme avec Devpac 2 (quelque soit la version), qui est bugg‚
    pour tous les modes d'adressage 'sp‚ciaux' du 68030. Ne vous ‚tonnez
    pas si vous avez des problŠmes en cours de route!
       La routine DSP_PLAY.BIN est pr‚-assembl‚e pour un mixage avec inter-
    polation. Pour vous donner une id‚e de l'am‚lioration d‚mentielle que
    l'interpolation apporte sur le son, essayez n'importe quel module pour
    faire un comparatif... Le lissage de la courbe sonore ‚limine la quasi
    totalit‚ des parasites haute-fr‚quence dus aux "marches d'escaliers" des
    samples 8 bits. On croirait presque des samples 16 bits tellement la
    diff‚rence est ‚norme!. Et avec des mini-modules comme celui fourni avec
    ces routines (CHIPMUN2.MOD), les bip-bip cracouillards se transforment en
    sons ‚coutables... mais qui restent des bip-bip, tout de mˆme.


VI. Utilisation
===============
       Il vous suffit, soit de charger (depuis votre programme) en m‚moire
    la routine DSP_PLAY.BIN g‚n‚r‚e, soit de l'inclure carr‚ment dans votre
    programme lui-mˆme avec un incbin.
       Supposons que vous ayez donc cette routine … l'adresse Player. Vous
    aurez alors le plan d'occupation suivant de la m‚moire:

    Player + 00 : Initialisation de DSP_PLAY.BIN, … appeler avant toute
                  autre chose.
    Player + 04 : Chargement d'un programme DSP externe, destin‚ … fonctionner
                  en parallŠle avec le player.
    Player + 08 : Pointeur sur les variables internes du soundtracker, par
                  exemple le volume des diff‚rentes voix, etc..
    Player + 12 : Routine … appeler tous les 50Hz, pour toute la gestion de
                  la musique. Bref, le player lui-mˆme.

       Vous commencerez donc par regarder si le DSP et le systŠme sonore du
    Falcon sont prˆts … ˆtre utilis‚ (cela s'appelle programmer proprement,
    et c'est utile pour faire un programme marchant sous Gem). Vous pouvez
    vous inspirer de la m‚thode employ‚e dans le source DSP_EXEM.S
       Vous devrez alors communiquer deux adresses … la routine d'initiali-
    sation: il s'agit de l'adresse du module NTK (dans le registre A0), et
    un buffer de 4Ko (dans le registre A1) utilis‚ par le player pour son
    usage interne (n'y touchez plus par la suite!!). Donc une s‚quence de
    type:
    
    	lea	module,a0
    	lea	buffer,a1
    	jsr	Player
    
       Maintenant, il s'agit de fixer certains paramŠtres de fonctionnement
    du player, en r‚cup‚rant leurs adresses en Player+8. Le paramŠtre le
    plus important est dma2dsp, qui indique le mode de transfert de donn‚es
    entre le 030 et le DSP. Pas de panique: le label dma2dsp est d‚fini dans
    le fichier DSP_PLAY.INC, ainsi que tous les autres.
       Si vous le fixer … $00 (c'est un octet), alors le transfert a lieu par
    le DMA (c'est le mode le plus rapide pour les deux processeurs, mais il
    n‚cessite un suivi sous interruptions cot‚ 68030. Il y a donc utilisation
    du Timer A, avec 3 interruptions par 50Hz.
       Si vous le fixer … $FF (plus g‚n‚ralement, <>0), alors le transfet des
    donn‚es se fait par le port Host, c'est le mode le plus lent, mais il n'
    utilise pas le Timer A.
       Vous pouvez changer ce paramŠtre n'importe quand pendant que la musique
    tourne, sa prise en compte est imm‚diate et ne provoque pas de coupure.

       Un autre paramŠtre sympathique est song_stop, qui vaut $00 (un octet,
    encore une fois) pour indiquer que le player peut continuer son travail,
    et $FF (c'est sa valeur aprŠs initialisation) pour indiquer que le player
    n'a pas le droit de fonctionner. Encore une fois, vous pouvez changer ce
    paramŠtre quand bon vous semble pour faire vos r‚glages.
    
       Un dernier pour la route: master_vol, sur un mot (valeur entre 0 et
    256 inclus). Il indique le volume sonore appliqu‚ sur l'ensemble des
    voix, ce qui permet de faire des fade-in / fade-out sans se fatiguer!.
       Il y en a d'autre, je vous conseille de vous reporter au fichier
    DSP_PLAY.INC, qui contient des commentaires, et au source DSP_PLAY.S
    en cas de doute.

       Ah oui: toutes ces variables sont des offset dans la zone des variables
    et doivent donc ˆtre utilis‚s comme suit:

    	include	"dsp_play.inc"
	(...)
    	move.l	Player+8,a0
    	clr.b	dma2dsp(a0)
    	clr.b	song_stop(a0)
    	(...)
    	subq.w	#1,(master_vol,[Player+8])
    	(...)

       Je pr‚cise que le dernier adressage, une sucrerie sp‚ciale 68030, peut
    bien s–r ˆtre remplac‚ par un simple master_vol(a0), si A0 contient bien
    la valeur de Player+8.


VII. Musique!
=============
       Il existe deux labels d'assemblage conditionnels dans le source
    DSP_PLAY.S, … savoir NO_FTUNE et NO_FTEST. Leur r“le respectif, s'ils
    sont pr‚sents au moment de l'assemblage, est de d‚connecter le FineTune
    du soundtracker (option du Protracker Amiga, peu utilis‚e et qui fait
    perdre un peu de temps) et le test des fr‚quence de restitution (inutile
    en temps normal, c'est une sorte de s‚curit‚ suppl‚mentaire pour ‚viter
    les plantages. C'est un peu comme porter une cagoule par dessus son
    casque de moto: pas trŠs utile).

       Une fois l'initialisation pass‚e, il ne vous reste plus qu'… installer
    une routine tournant … 50Hz, pour faire un appel en Player+12 (pas besoin
    de faire une sauvegarde des registres, la routine s'en occupe). Il y a l…
    une feinte: les modules Amiga r‚cents comporte une option suppl‚mentaire,
    qui permet de g‚rer finement le tempo d'une musique. Ainsi, la base de
    restitution ne sera plus 50Hz, mais une autre valeur quelconque (par
    exemple 53Hz). Cette option est presque correctement g‚r‚e dans cette
    version du soundtracker DSP...
       Je dis presque, car le code DSP est pr‚vu pour une fr‚quence fixe, par
    d‚faut du 50Hz. Il est … la limite possible de changer cette valeur dans
    le source DSPMIX_A.ASM, mais elle restera fixe. Mais il s'avŠre que mes
    routines ont une bonne tol‚rence quand aux variations de fr‚quence, …
    condition de rester dans des limites raisonnables (je lui ai d‚j… fait
    encaisser du 60Hz). MAIS si le tempo passe en dessous de 50Hz (plus
    pr‚cis‚ment 48Hz), la routine se mettra … d‚conner, avec de bonnes
    chances pour un plantage assez monumental.
       Ensuite, le r‚glage du tempo n'est pris en charge par la routine que
    si le label NO_TEMPO est enlev‚, et SURTOUT si vous avez install‚ votre
    interruption 50Hz avec le Timer D (qui sera alors reprogramm‚ selon les
    d‚sirs du musicien, sans que vous n'ayez … intervenir). Pour ‚viter les
    plantages, seuls les tempos de plus de 49Hz sont accept‚s, les autres
    sont ignor‚s. Bref, c'est pas simple!
       DerniŠre chose: il serait possible de faire bien mieux quant … la
    gestion (passer par un Timer n'est pas trŠs pr‚cis, et il vaudrait mieux
    adapter vraiment les routines pour avoir un r‚sultat nickel). Ceci dit,
    j'ai essay‚ avec deux modules utilisant les tempo (condom corruption et
    fulmoon 1), le r‚sultat ‚tait impeccable. Notons au passage que la
    presque totalit‚ des modules qui se servent du tempo sont en fait des
    zikmu tecno-hardcore, avec un string de batterie digitalis‚ qui tourne
    en boucle: il n'y a pas besoin de beaucoup de pr‚cision...

       Nb: les tempos sont fix‚s par Set Speed (commande F), utilis‚ avec une
    valeur sup‚rieure … 32 ($20). La fr‚quence obtenue est alors valeur/2.5
    Par exemple, la valeur par d‚faut est $7D (car 125/2.5=50).


VIII. Programmons
=================
       Maintenant que votre musique est fidŠlement reproduite en 16bits avec
    balances et interpolation kitulamor sur votre haut-parleur interne, reste
    … se servir du DSP pour faire d'autres choses. Rien de plus simple:

       Cr‚ez votre programme selon les m‚thodes habituelles, testez-le comme
    bon vous semble avec le Xbios Dsp_ExecProg ou Dsp_LoadProg (donc sans le
    player) pour ˆtre s–r qu'il tourne correctement (c'est mieux s'il n'est
    pas bugg‚ !!), en respectant les normes de programmation DSP habituelles
    (commencement en $0000, saut en $0040, etc..). Une fois ceci fait, il faut
    v‚rifier que votre routine ne se sert pas de la Ram utilis‚e par le mixeur
    DSP. En effet, celui-ci est install‚ autour de l'adresse BASEAD (constante
    d‚finie dans le source DSPMIX_A.ASM). Voici comment il est organis‚:
    
    M‚moire Y:	BASEAD-$0200...BASEAD: Routines DSP
    		BASEAD...BASEAD+$0FFF: Buffer sonore
    M‚moire X:	BASEAD-$0100...BASEAD: Variables internes
    		BASEAD...BASEAD+$0FFF: Buffer sonore
    
    M‚moire P:	BASEAD-$0200...BASEAD+$0FFF : Interdit
    		BASEAD+$3F00...BASEAD+$4FFF : Interdit

       (Nb: la m‚moire P recouvrant les m‚moires X et Y, les zones d‚crites
       sont donc identiques).

       Attention: BASEAD ne peut valoir que $1000, $2000 ou $3000. De plus,
    si BASEAD=$3000, vous ferez planter le Xbios (son driver DSP, ainsi que
    d'‚ventuels sous-programmes DSP, se situent aux environs de P:$7800 et au
    del…, bref entre X:$3000=P:$7000 et X:$4000=P:$8000). Le player marchera
    sans aucun problŠme, mais vous ne pourrez plus utiliser le Xbios par la
    suite.

       Ensuite, certains vecteurs de la table d'interruptions du DSP sont
    strictement r‚serv‚s au mixeur:
                      nø $06 = $000C : Entr‚e sonore
                      nø $07 = $000E :   ""     ""
                      nø $08 = $0010 : Sortie sonore
                      nø $09 = $0012 :   ""     ""
                      nø $13 = $0026 : Appel au mixeur
                      nø $14 = $0028 : Appel au loader de programmes DSP

    Les deux premiers vecteurs peuvent ˆtre utilis‚s … condition que le mixeur
    ne fonctionne pas en mode DMA (donc il faut que dma2dsp=$FF) au moment du
    chargement de votre programme, ni pendant son ex‚cution bien-s–r, ni par
    la suite.

       Une fois que vous aurez v‚rifi‚ que votre programme DSP n'empiŠte pas
    sur les zones r‚serv‚es au mixeur, et bien il suffira d'appeler la routine
    en Player+8, avec comme paramŠtre en A0 l'adresse de votre programme au
    format binaire, et en D0 sa longueur en mots DSP (ce sont exactement les
    mˆmes paramŠtres que la routine Xbios Dsp_ExecProg). Un exemple est
    fourni dans ce dossier.
    
       Attention aussi: Si vous effectuez des transfert par le port Host, sans
    faire de tests du hsr ($FFA202) pour aller plus vite, vous risquez d'avoir
    des ennuis. Pour une raison technique simple (la routine 68030 rend la
    main trŠs vite … votre programme, alors que le DSP continue de mixer avant
    de redonner la main … votre routine), vous allez lire ou ‚crire des
    donn‚es qui ne seront ignor‚es par votre routine DSP (encore bloqu‚e par
    la mixeur).
       Il y a trois solutions adapt‚e … chaque cas: si votre transfert tient
    globalement en moins de 1 VBL (exemple typique: un effet graphique dans
    une d‚mo), il suffit simplement de tester, au tout d‚but de votre trans-
    fert, la disponibilit‚ des donn‚es, en ‚tant synchronis‚ avec l'inter-
    ruption 50Hz du player (i.e: le player est appel‚ depuis votre VBL, et
    votre routine de transfert le suit imm‚diatement). Vous pourrez alors
    faire des transferts sans aucun test jusqu'… la prochaine VBL.
       Si votre transfert est de dur‚e variable, mais peut ˆtre d‚coup‚ en
    petit bouts pas trop longs (exemple: du mapping, que l'on affiche ligne
    par ligne). Il suffit alors (le player est en VBL), de passer en IPL 5
    du cot‚ 68030 pour ‚viter une ‚ventuelle VBL, le temps de faire un bout
    de votre transfert (avec un test de disponibilit‚ sur les trois premiŠres
    valeurs transf‚r‚es, n'oubliez pas ce d‚tail).
       Proc‚der sous interruptions cot‚ DSP. Votre routine devra se servir
    des registres d'adressage (r4,m4,n4) pour son interruption Host. MAIS
    attention, l'exp‚rience montre que dans ce cas l…, le 030 va plus vite
    que l'interruption DSP (qui est retard‚e par les interruptions SSI
    sonores de plus forte priorit‚, d'autant plus si vous utiliser le
    transfert DMA (dma2dsp=$00), ainsi que par les instructions longues en
    cycles (do, ou rep)). Il se peut donc que vous ayez de petits problŠmes.

       Ceci ‚tant dit, n'oubliez pas que le couple de registres (r7,m7) ne
    doit jamais ˆtre utilis‚ par votre routine DSP, et que le couple (r3,m3)
    ne peut ˆtre utilis‚ que si vous ˆtes en mode de transfert par le port
    Host (dma2dsp=$FF), car il est utilis‚ en mode DMA. De plus, vous n'avez
    pas le droit d'utiliser les Host User Command 0 & 1 (vecteurs $13 et $14).
    Evitez aussi les gros rep (au del… d'une cinquantaine de cycles machine
    bloqu‚s, les interruptions sonores perdent le fil), et de maniŠre g‚n‚rale
    tout ce qui peut bloquer le DSP (longs passages en IPL2 ou 3, Host Command
    interminables, etc..).


IX. MINIPLAY !
==============
       Vous trouverez dans le dossier, un programme totalement autonome:
    MINIPLAY.S. Il est bas‚ sur DSP_EXEM.S, avec en plus la routine de
    convertion de modules int‚gr‚e, et plusieurs routines de d‚compactage
    incluses. Il vous suffira d'installer ce programme en application sur
    le bureau, avec comme type de fichier les *.MOD. Par la suite, il ne
    vous retera plus qu'… double-cliquer sur un module pour l'‚couter
    en tout confort.
       Vous avez aussi la possibilit‚ de simplement amener l'icone d'un
    fichier *.MOD ou *.NTK sur l'icone de MINIPLAY.TTP. Ce programme n'a
    pour seule ambition que de vous donner un exemple plus complet d'
    utilisation de toutes les routines mises … votre disposition. Libre
    … vous de le transformer en super-player sous Gem, avec des boutons
    partout et une interface digne de ce nom...


X. Servez-vous!
================
       Comme indiqu‚ en en-tˆte de la pr‚sente documentation, vous pouvez
    vous servir librement de tout ou partie de ces routines, pour votre
    usage personnel ou dans un but non lucratif (dans un logiciel du
    domaine public, ou en freeware), sans oublier de citer leur origine.
       Mais si vous comptez vous en servir dans un but lucratif (c'est-…-
    dire un logiciel commercial ou en shareware), contactez moi pour avoir
    mon accord.


XI. Ca sera tout ma bonne dame
=============================
       Bon code, et … une prochaine fois sur Power Falcon (non, je rigole!).

                                                             Nullos / DNT-Crew
                                                                 le 25/08/1994


XII. Historique
===============

o 2.0  : PremiŠre version diffus‚e, avec le DNT-Paper 7.
         Vous trouverez dans ce dernier les explications concernant les points
         de programmation d‚licats.

o 2.5  : PremiŠre update diffus‚e, de nombreux am‚liorations ‚t‚ apport‚es:
         .Gestion du cache 030 pendant le mixage pour ‚viter certains gags
          quand le cache est mal configur‚.
         .Enorme bug dans la routine P_loader ‚limin‚, les programmes DSP
          charg‚s par le player ne pouvaient pas avoir de zone data en
          m‚moire X et Y interne (pas de problŠme en bss, par contre).
         .Gestion du tempo, dans certaines limites.
          (Merci … Nucleus qui m'a signal‚ cet oubli)
         .Gestion des samples de 128Ko.
         .Deux routines de mixage plus ‚volu‚es (rapide ou interpol‚e).

o 2.6  : .Bug enlev‚ dans la routine de convertion de modules, concernant
          les patterns non-utilis‚s mais pr‚sents quand mˆme dans les
          fichiers *.MOD
         .Emulation totale (j'espŠre) des bugs du SoundTracker & Protracker
          concernant les notes sans instruments et les instruments sans
          notes (m‚keskidi ?..)
         .Suppression d'une petite erreur qui faisait qu'un module stopp‚
          red‚marrait avec les canaux gauche & droit invers‚s.
         .Am‚lioration du mixeur DSP qui r‚siste bien mieux aux blocages
          du 68030 (ex: passage en IPL7 qui immobilise tout le monde).
          (Merci … Megar qui m'a signal‚ ce point faible)
         .Petit programme MiniPlay rajout‚ dans le lot.

o 2.7  : .Modification de l'‚mulateur de bugs pour le note-delay.
         .Bug immonde enlev‚ dans la gestion du note-delay.
         .Prise en compte de la gestion simplifi‚e des samples boucl‚s.
         .Minuscule erreur dans le chargeur de programmes DSP (mauvaise
         initialisation des registres Mn, sans cons‚quences).
