*
* wolln wir an der MIDI-Schnittstelle rumbasteln? na denn..
* werden wir erstmal Parameter der EinAusgabePuffer
* so umschichten, daû der MIDI-in-Puffer deutlich grîûer wird.


WNZ: EQU 299678 wartezeit bei Drucker-newline

iSerSy: equ 16
oSerSy: equ 36
iMidSy: equ 56
iTasSy: equ 76

 LINK A4,#-988
LOELI:
 CLR.L -(A4)
 CMP.L A7,A4
 BHI  LOELI   die xx(A4)-Parameter alle auf 0, nun a4=a7

VORAGAI:
 LEA  VORSTLL(PC),A0
 BSR  ANTVVIEL
 MOVEQ #0,D0
 BSR  IOREC
 LEA iSerSy(A4),A1
 BSR  HXABADR
 BSR  NEWLINTV
 LEA  VS2(PC),A0
 BSR  ANTVVIEL
 MOVEQ #0,D0
 BSR  IOREC
 ADDA.W #14,A0
 LEA oSerSy(A4),A1
 BSR  HXABADR
 BSR  NEWLINTV

 LEA  VS3(PC),A0
 BSR  ANTVVIEL
 MOVEQ #1,D0
 BSR  IOREC
 LEA iTasSy(A4),A1
 BSR  HXABADR
 BSR  NEWLINTV
 LEA  VS4(PC),A0
 BSR  ANTVVIEL
 MOVEQ #2,D0
 BSR  IOREC
 LEA iMidSy(A4),A1
 BSR  HXABADR
 BSR  NEWLINTV
 LEA  NSTL(PC),A0
 BSR  ANTVVIEL

*******************
move #1,-(a7)
trap #1
and.B #$DF,d0
cmp.B #'P',d0
bne HOERAUF


 BSR  Mid2Ser
 BSR  Ser2Mid

*******************
bra HOERAUF

HOERAUF:
 CLR.W -(A7)
 TRAP #1

IOREC:
 MOVE.W D0,-(A7)
 MOVE.W #14,-(A7)
 TRAP  #14
 ADDQ.L #4,A7
 MOVE.L D0,A0
 RTS

WIEDERSY:
 LEA iSerSy(A4),A1
 BSR PUPAR
 LEA oSerSy(A4),A1
 BSR PUPAR
 LEA iTasSy(A4),A1
 BSR PUPAR
 LEA iMidSy(A4),A1
 BRA PUPAR

PUPAR:
 MOVE.L (A1)+,A0    adr,wo BetrSys Puffr-Parametr aufhebt
PUPP:
 MOVE.L (A1)+,(A0)+  PufferAdr
 MOVE.W (A1)+,(A0)+  PuffrLÑnge
 MOVE.L (A1)+,(A0)+  Head&TailIndex
 MOVE.L (A1)+,(A0)+  Low&HighWatermark
 RTS

Mid2Ser:
 MOVE.L iMidSy(A4),A0  (a0).L=original MIDI-in-PufferAdr
 CMP.W #128,     4(A0)
 BHI  OKS2M
 LEA  iSerSy+4(A4),A1  (a1).L=Duplikat der Seriell-in-Puffer-Adr
 BSR  PUPP
 LEA  oSerSy+8(A4),A1  (a1).W=Duplikat der Seriell-out-Puffr-LÑnge
 MOVE.L iMidSy(A4),A0
 ADDQ.L #4,       A0   (a0).W= {neue} LÑnge des MIDI-Puffr (im sysRAM)
 MOVE.W (A1), D0
 ADD.W  D0,  (A0)    nochmals vergrîûern
 ADDQ.L #8,   A0    (a0).W= {neue} HiWaterMark des MIDI-Puffr
 ADD.W  D0,  (A0)   ebenfalls nochmals vergrîûern
OKS2M:
 rts  nun dÅrfte der MIDI-Puffer dort sein,wo zuvor die beiden SeriellPuffer
*     waren, und damit mÅûte er viermal so lang sein als zuvor.

Ser2Mid:
 MOVE.L iSerSy(A4),A0  (a0).L=original Seriell-in-PufferAdr
 CMP.W #128,     4(A0)
 BLS  NIXM2S
 LEA  iMidSy+4(A4),A1  (a1).L=Duplikat der MIDI-in-Puffer-Adr
 BSR  PUPP
 MOVE.L iSerSy(A4),A0
 LSR.W  4(A0)     halbe frÅhere MIDI-LÑnge als neue Ser-i-LÑnge
 LSR.W 10(A0)   {neue} LoWaterMark des Ser-i-P  ebenfalls halbieren
 LSR.W 12(A0)   HiWater auch halb

 MOVE.L oSerSy(A4),A0  (a0).L=original Seriell-out-PufferAdr
 CMP.W #128,     4(A0)
 BLS  NIXM2S
 LEA  iMidSy+4(A4),A1  (a1).L=Duplikat der MIDI-in-Puffer-Adr
 BSR  PUPP
 MOVE.L oSerSy(A4),A0
 LSR.W  4(A0)     halbe frÅhere MIDI-LÑnge als neue Ser-o-LÑnge
 MOVEQ  #0,  D0
 MOVE.W 4(A0),D0
 ADD.L  D0,  (A0)
 LSR.W 10(A0)   {neue} LoWaterMark des Ser-i-P  ebenfalls halbieren
 LSR.W 12(A0)   HiWater auch halb
NIXM2S:
 rts


HXABADR:
 MOVE.L A0, (A1)+
 MOVE.L (A0)+,D0
 MOVE.L D0, (A1)+  protokollier auf dem xx(a4)-LocalStack
 BSR   HEXAUFTV
 MOVEQ #0,D0
 MOVE.W (A0)+,D0
 MOVE.W D0, (A1)+
 BSR   HEXAUFTV
 MOVEQ #0,D0
 MOVE.W (A0)+,D0
 MOVE.W D0, (A1)+
 BSR   HEXAUFTV
 MOVEQ #0,D0
 MOVE.W (A0)+,D0
 MOVE.W D0, (A1)+
 BSR   HEXAUFTV
 MOVEQ #0,D0
 MOVE.W (A0)+,D0
 MOVE.W D0, (A1)+
 BSR   HEXAUFTV
 MOVEQ #0,D0
 MOVE.W (A0)+,D0
 MOVE.W D0, (A1)+
 BRA   HEXAUFTV


OH1:
rol.L #4,d0
movem.L a0-a3/d0-d3,-(a7)
and.W  #15,d0
add.B #'0',d0
cmp.B #'9',d0
bls  OH1K
addq.B #7,d0
OH1K:
move.W d0,-(a7)
move.W #2,-(a7)
trap  #1
addq.L #4,a7
movem.L (a7)+,d0-d3/a0-a3
rts


HEXAUFTV:
 bsr BLANKTV
OH8:
bsr OH1
bsr OH1
bsr OH1
bsr OH1
bsr OH1
bsr OH1
bsr OH1
bra OH1

BLANKTV:
 MOVEM.L A0/D0,-(A7)
 LEA  BLNK(PC),A0
 BRA  TTTV
NEWLINTV:
 MOVEM.L A0/D0,-(A7)
 LEA  NLTV(PC),A0
TTTV:
 BSR  ANTVVIEL
 MOVEM.L (A7)+,D0/A0
 RTS

ANTVVIEL:
TV1NOC:
 MOVEQ  #0,  D0
 MOVE.B (A0)+,D0
 BEQ   RTANTVV
 BSR   ANTV1
 BRA   TV1NOC
RTANTVV:
 RTS

ANTV1:
 MOVEM.L A0/D0,-(A7)
 MOVE.W D0, -(A7)
 MOVE.W #2, -(A7)
 TRAP  #1
 ADDQ.L #4, A7
 MOVEM.L (A7)+,D0/A0
 RTS


VORSTLL:
 DC.B 27,102,27,118,13,10,10,'   Laû uns MIDI basteln.',13,10,10
 DC.B 'Erstmal Infos aus Ataris Betriebssystem:',13,10
 DC.B 'InSerPuff PuffrLÑn headIndx tailIndx lowWater higWater',13,10,0
VS2:
 DC.B 'OuSerPuff PuffrLÑn headIndx tailIndx lowWater higWater',13,10,0
VS3:
 DC.B 'InTastatu PuffrLÑn headIndx tailIndx lowWater higWater',13,10,0
VS4:
 DC.B ' In_Midi  PuffrLÑn headIndx tailIndx lowWater higWater',13,10,0
NSTL:
 DC.B 13,10,10,' wenn Sie jetzt P tippen, so wird probiert, die LÑnge des'
 DC.B    13,10,' In_Midi-Puffers auf Kosten der SerPuffer zu vergrîûern.',0

NLTV:  DC.B 13,10,0
BLNK:  DC.B 32,0

.EVEN

LL: DC.W $FFFF


